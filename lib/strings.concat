lib/strings :

core #namespace
stack #include
codeblocks #include
math #include

lexCmp public proc( A <?> A array A array => int ){
  b =::
  a =::
  a .length b .length min l =::
  0 while{ dup l < do
    a over [] b 2over [] - c =::
    c 0 != if{ drop
      c return
    }
    1 +
  } drop
  a .length b .length - int cast return
}

## comparison operators for string and ustring
>  public proc( string  string  => bool ){ lexCmp 0 >  }
<  public proc( string  string  => bool ){ lexCmp 0 <  }
>= public proc( string  string  => bool ){ lexCmp 0 >= }
<= public proc( string  string  => bool ){ lexCmp 0 <= }
== public proc( string  string  => bool ){ lexCmp 0 == }
!= public proc( string  string  => bool ){ lexCmp 0 != }

>  public proc( ustring ustring => bool ){ lexCmp 0 >  }
<  public proc( ustring ustring => bool ){ lexCmp 0 <  }
>= public proc( ustring ustring => bool ){ lexCmp 0 >= }
<= public proc( ustring ustring => bool ){ lexCmp 0 <= }
== public proc( ustring ustring => bool ){ lexCmp 0 == }
!= public proc( ustring ustring => bool ){ lexCmp 0 != }

startsWith public proc( A <?> A array A array => bool ){
  b =::
  a =::
  a .length b .length < if{ false return }
  0 while{ dup b .length < do
    a over [] b 2over [] != if{ drop
      false return
    }
    1 +
  } drop
  true return
}
endsWith public proc( A <?> A array A array => bool ){
  b =::
  a =::
  a .length b .length - int off =:
  off 0 < if{ false return }
  0 while{ dup b .length < do
    a over off + [] b 2over [] != if{ drop
      false return
    }
    1 +
  } drop
  true return
}
indexOf public proc( A <?> A array A array => int ){
  b =::
  a =::
  a .length b .length - int iMax =:
  0 i mut =::
  false match mut =::
  while{ i iMax <= do
    0 j mut =::
    true match =
    while{ match &&{ j b .length < } do
      a i j + [] b j [] != if{
        false match =
      }
      j 1 + j =
    }
    match if{
      i return
    }
    i 1 + i =
  }
  -1 return
}
isSublist public proc( A <?> A array A array => bool ){ indexOf 0 >= }
lastIndexOf public proc( A <?> A array A array => int ){
  b =::
  a =::
  a .length b .length - int iMax =:
  iMax i mut =::
  false match mut =::
  while{ i 0 >= do
    0 j mut =::
    true match =
    while{ match &&{ j b .length < } do
      a i j + [] b j [] != if{
        false match =
      }
      j 1 + j =
    }
    match if{
      i return
    }
    i 1 - i =
  }
  -1 return
}


#end