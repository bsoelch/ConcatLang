lib/numbers :

core #namespace

stack #include
codeblocks #include
chars #include
io #include

math #include
math #import

uint_MAX public #define  0xffffffffffffffffu #end
uint_MIN public #define                   0u #end
 int_MAX public #define  0x7fffffffffffffff  #end
 int_MIN public #define -0x8000000000000000  #end

#+ addLater float_MIN, float_MAX +#
float_NaN public #define 0 0.0 / #end ##addLater move to native constants
float_Positive_Infinity public #define 1 0.0 / #end
float_Negative_Infinity public #define -1 0.0 / #end

float_isNaN public proc( float => bool ){
  float val =:
  val val =!= return
}
float_isFinite public proc( float => bool ){
  float val =:
  val float_Positive_Infinity < &&{ val float_Negative_Infinity > } return
}

getDigit proc( #+value+# int #+base+# int #+big+# bool => #+char+# byte ){
    bool big =:
    int base =:
    int value =:
    value 0 < ||{ value base >= } if{
        ## even though <<i calls this function
        ## this error check should not be activated when <<i is called normally
        "Digit out of range: " value <<i " base: " <<* base <<i '\n' << eputs
        1 exit
    }
    value 10 < if{
        value '0' +char return
    else value 36 < if
        value 10 -
        big ||{ base 36 > } if{ 'A'  else 'a' } +char return
    else
        value 36 - 'a' +char return
    }
}

<<???i public proc( #+buffer+#string #+value+# uint #+base+# int #+signed+# bool #+big+# bool => string ){
  bool big =:
  bool signed =:
  int base =:
  uint value =:
  base 2 < ||{ base 62 > } if{
    ## even though printing recursively calls this function
    ## this error check should not be activated when <<i is called normally
    "Base out of range: " base <<i ", base has to be between 2 and 62\n" <<* eputs
    1 exit
  }
  value 0 == if{
    '0' << return
  }
  signed &&{ value int cast 0 < } if{
      '-' <<
      value int cast -_ value =
  }
  1u uint p =:
  while{ value p / base >= do p base * p = }
  while{ p 0 > do
      value p /  base big getDigit <<
      value p % value =
      p base / p =
  }
}
intToString public proc( #+value+# int #+base+# int #+signed+# bool #+big+# bool => string ){
  bool big =:
  bool signed =:
  int base =:
  int value =:
  "" value base signed big <<???i return
}

<<?i public proc( #+buffer+#string #+value+# int #+base+# int => string ){
  #+signed+# true  #+big+# false <<???i return
}
<<?I public proc( #+buffer+#string #+value+# int #+base+# int => string ){
  #+signed+# true  #+big+# true  <<???i return
}
<<?u public proc( #+buffer+#string #+value+# int #+base+# int => string ){
  #+signed+# false #+big+# false <<???i return
}
<<?U public proc( #+buffer+#string #+value+# int #+base+# int => string ){
  #+signed+# false #+big+# true  <<???i return
}
<<i public proc( #+buffer+#string #+value+# int => string ){
  #+base+# 10 #+signed+# true  #+big+# false <<???i
}
<<u public proc( #+buffer+#string #+value+# int => string ){
  #+base+# 10 #+signed+# false #+big+# false <<???i
}
<<x public proc( #+buffer+#string #+value+# int => string ){
  #+base+# 16 #+signed+# false #+big+# false <<???i
}
<<X public proc( #+buffer+#string #+value+# int => string ){
  #+base+# 16 #+signed+# false #+big+# true  <<???i
}

<<????f public proc( #+buffer+# string #+value+# float #+precision+# int #+base+# int #+big+# bool #+sci+# bool => string ){
  bool  sci =:
  bool  big =:
  int   base =:
  int   precision =:
  float value =:
  base 2 < ||{ base 62 > } if{
    "Base out of range: " base <<i ", base has to be between 2 and 62\n" <<* eputs
    1 exit
  }
  value float_isFinite ! if{
    value float_isNaN if{
      "[NaN]"
    else value 0 > if
      "[Infinity]"
    else
      "-[Infinity]"
    } <<* return
  else value 0.0 == ||{ value -0.0 == } if
    "0" <<* return
  }
  value 0 < if{
    '-' <<
    value -_ value =
  }
  0b1e-110100 #+2^-52+# value * float eps =: ##? better implementation of eps
  value log base log / floor int e =:
  e int e_max =:
  base e float cast pow float p =:
  64 int list new int list buff =:
  0 int n =:
  while{ p eps > do
    value p / floor int cast int d =:
    buff d << buff =
    n 1 + n =
    value d p * - value =
    p base / p =
    e 1 + e =
  }
  precision 0 == ||{ precision n >= } if{
    n 1 -
  else
    precision
  } n =
  buff n [] base 2 / >= if{
    n 1 - int j =:
    true bool inc =:
    while{ inc &&{ j 0 >= } do
      buff j [] 1 +  buff j []=
      buff j [] base >= if{
        buff j [] base -  buff j []=
      else
          false inc =
      }
      j 1 - j =
    }
    inc if{
      1 buff >> buff =
      e_max 1 + e_max =
      n 1 + n =
    }
  }
  while{ n 1 - e_max > &&{ buff n 1 - [] 0 == } do
    n 1 - n =
  }
  sci ||{ e_max n >= ||{ e_max -5 < } } if{
    while{ n 1 - 0 > &&{ buff n 1 - [] 0 == } do
      n 1 - n =
    }
    buff 0 [] base big getDigit <<
    n 1 > if{
      '.' <<
      1 while{ dup n < do
         swap over buff swap [] base big getDigit <<
         swap 1 +
      } drop
    }
    base 10 <= if{ 'E' else base 30 <= if 'X' else '#' } <<
    e_max 0 >= if{ '+' << }
    e_max  base true big <<???i
  else e_max 0 >= if
    0 while{ dup n < do
      swap over buff swap [] base big getDigit <<
      over e_max == &&{ over n 1 - < } if{
        '.' <<
      }
      swap 1 +
    } drop
  else
    "0." <<*
    e_max -_ 1 - while{ dup 0 > do
      swap '0' <<
      swap 1 -
    } drop
    0 while{ dup n < do
      swap over buff swap [] base big getDigit <<
      swap 1 +
    } drop
  }
  return
}
<<??f public proc( #+buffer+# string #+value+# float #+precision+# int #+base+# int => string ){
  #+big+# false #+sci+# false <<????f
}
<<??F public proc( #+buffer+# string #+value+# float #+precision+# int #+base+# int => string ){
  #+big+# true  #+sci+# false <<????f
}
<<??e public proc( #+buffer+# string #+value+# float #+precision+# int #+base+# int => string ){
  #+big+# false #+sci+# true  <<????f
}
<<??E public proc( #+buffer+# string #+value+# float #+precision+# int #+base+# int => string ){
  #+big+# true  #+sci+# true  <<????f
}
<<?f public proc( #+buffer+# string #+value+# float #+precision+# int => string ){
  #+base+# 10 #+big+# false #+sci+# false <<????f
}
<<?e public proc( #+buffer+# string #+value+# float #+precision+# int => string ){
  #+base+# 10 #+big+# false #+sci+# true  <<????f
}
<<f public proc( #+buffer+# string #+value+# float => string ){
  #+precision+# 0 #+base+# 10 #+big+# false #+sci+# false <<????f
}
<<e public proc( #+buffer+# string #+value+# float => string ){
  #+precision+# 0 #+base+# 10 #+big+# false #+sci+# true  <<????f
}

floatToString public proc( #+value+# float #+precision+# int #+base+# int #+big+# bool #+sci+# bool => string ){
  bool  sci =:
  bool  big =:
  int   base =:
  int   precision =:
  float value =:
  "" value precision base big sci <<????f return
}

valueOfDigit public proc( #+digit +# byte #+base+# int => #+value+# int ){
  int  base =:
  byte digit =:
  digit '0' >= &&{ digit '9' <= } if{
    digit '0' charDiff
  else digit 'A' >= &&{ digit 'Z' <= } if
    digit 'A' charDiff 10 +
  else digit 'a' >= &&{ digit 'z' <= } if
    digit 'a' charDiff
    base 37 < if{ 10 else 36 }
    +
  else
    -1
  }
  dup base >= if{
    drop -1 return
  }
  return
}

StringParseError public enum{
  ERR_NONE
  ERR_BASE
  ERR_EMPTY
  ERR_OVERFLOW
  ERR_ILLEGAL_CHAR
}

stringToInt public proc( #+source+# string #+base+# int #+signed+# bool => #+val+# int #+err-code+# StringParseError ){
  bool signed =:
  int  base =:
  string source =:
  base 2 < ||{ base 62 > } if{
    0 StringParseError .ERR_BASE return
  }
  source .length 0 == if{
    0 StringParseError .ERR_EMPTY return
  }
  0 int res =:
  0 int i =:
  false bool sgn =:
  source 0 [] '-' == if{
    true sgn =
    1 i =
  else source 0 [] '+' == if
    1 i =
  }
  signed if{ int_MAX uint cast else uint_MAX } base uint cast / int maxVal =:
  while{ i source .length < do
    res maxVal > if{
      res  sgn if{ -_ } StringParseError .ERR_OVERFLOW return
    }
    source i [] base valueOfDigit int tmp =:
    tmp 0 < if{
      res  sgn if{ -_ } StringParseError .ERR_ILLEGAL_CHAR return
    }
    res base * tmp + res =
    i 1 + i =
  }
  res  sgn if{ -_ } StringParseError .ERR_NONE return
}

checkErrCode proc( #+err-code+# StringParseError #+type-name+# string #+source+# string => ){
  string source =:
  string typeName =:
  #+err-code+# switch{
  ERR_NONE case end-case
  ERR_BASE case
      "invalid string-format for " typeName <<* " \"" <<* source <<* "\" (base outside of allowed rage)\n" <<* eputs
      1 exit
  end-case
  ERR_EMPTY case
      "invalid string-format for " typeName <<* " \"" <<* source <<* "\" (empty-string)\n" <<* eputs
      1 exit
  end-case
  ERR_ILLEGAL_CHAR case
      "invalid string-format for " typeName <<* " \"" <<* source <<* "\" (illegal-character)\n" <<* eputs
      1 exit
  end-case
  ERR_OVERFLOW case
      "invalid string-format for " typeName <<* " \"" <<* source <<* "\" (overflow)\n" <<* eputs
      1 exit
  end-case
  }
}
parseInt  public proc( string => int ){
  string source =:
  source 10 true stringToInt
  "int" source checkErrCode
}
parseUInt public proc( string => int ){
  string source =:
  source 10 false stringToInt
  "uint" source checkErrCode
}
parseHex public proc( string => uint ){
  string source =:
  source 16 true stringToInt
  "uint" source checkErrCode
  uint cast return
}

isExpChar proc( #+char+# byte #+base+# int => bool ){
  int base =:
  byte c =:
  c 'e' == ||{ c 'E' == } if{
    base 'E' 'A' - 10 + 1 + <
  else c 'p' == ||{ c 'P' == } if
    base 'P' 'A' - 10 + 1 + <
  else c 'x' == ||{ c 'X' == } if
    base 'X' 'A' - 10 + 1 + <
  else c '#' == if
    true
  else
    false
  }
}

stringToFloat public proc( #+str+# string #+base+# int => #+val+# float #+err-code+# StringParseError ){
  int base =:
  string str =:
  base 2 < ||{ base 62 > } if{
    float_NaN StringParseError .ERR_BASE return
  }
  str .length 0 == if{
    0.0 StringParseError .ERR_EMPTY return
  }
  0 int val =:
  0 int i =:
  false bool sgn =:
  str 0 [] '-' == if{
    true sgn =
    1 i =
  else str 0 [] '+' == if
    1 i =
  }
  0  int c =:
  0  int d =:
  -1 int e =:
  1 53 << int maxVal =: ## maximum precision of ieee float64
  while{ i str .length < do
    str i [] '.' == if{ ## str[i] == '.'
      d 0 != if{
        float_NaN StringParseError .ERR_ILLEGAL_CHAR return
      }
      1 d =
    else str i [] base isExpChar if
      i 1 + e =
      i str .length + i =  ## break Loop by setting index to value >= str.length
    else
      str i [] base valueOfDigit int tmp =:
      tmp 0 < if{
        0.0 StringParseError .ERR_ILLEGAL_CHAR return
      }
      val maxVal < if{
        val base * tmp + val =
        c d + c =
      else
        c 1 d - + c =
      }
    }
    i 1 + i =
  }
  e 0 > if{
    str e str .length [:] base true stringToInt
    StringParseError err_code =:
    int exponent =:
    err_code StringParseError .ERR_NONE != if{
      float_NaN err_code return
    }
    c exponent - c =
  }
  val  sgn if{ -_ } base c -_ float cast pow * StringParseError .ERR_NONE return
}

parseFloat public proc( string => float ){
  string source =:
  source 10 stringToFloat
  "float" source checkErrCode
}

#end ## core