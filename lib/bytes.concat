lib/bytes :

core #namespace
valueIO #include

uintToBytes public proc( uint => byte array ){
  uint val mut =:
  0 8 byte array mut new rawData =::
  0 i mut =::
  while{ i 8 < do
    val 0xff & byte cast rawData i []=
    val 8 >> val =
    i 1 + i =
  }
  ##there is currently not better way to obtain an immutable copy of a mutable array
  rawData clone-mut~ return
}

uintFromBytes public proc( byte array mut? => uint ){
  byte array mut? rawData =:
  rawData .length 8 > if{
    "too much bytes from convert to int:" puts rawData .length print " maximum: 8\n" puts
    1 exit
  }
  0 uint val mut =:
  rawData .length 0 > if{
    0 uint shift mut =:
    0 uint i mut =:
    while{ i rawData .length < do
      val rawData i [] uint cast shift << | val =
      shift 8 + shift =
      i 1 + i =
    }
    rawData .length 8 < &&{ rawData rawData .length 1 - [] uint cast 0x80 & 0 != } if{
      val -1 shift << | val =
    }
  }
  val
}

#end ##core

