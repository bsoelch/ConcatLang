lib/iterator :

core #namespace

Iterator tuple (list) int end

^_ proc (list) => Iterator :
  (list) elements =:
  elements 0 Iterator new
end

_^ proc (list) => Iterator :
  (list) elements =:
  elements elements length Iterator new
end

^> proc Iterator => Iterator var optional :
  Iterator mItr =:
  mItr
  mItr 1 [] mItr 0 [] length < if
    mItr 0 [] mItr 1 [] [] wrap ## push element
    mItr  mItr 1 [] 1 +  1 [] = ## increment iterator
  else
    mItr 0 [] .type empty return
  end
end

<^ proc Iterator => Iterator var optional :
  Iterator mItr =:
  mItr
  mItr 1 [] 0 > if
    mItr  mItr 1 [] 1 -  1 [] = ## decrement iterator
    mItr 0 [] mItr 1 [] [] wrap ## push element
  else
    mItr 0 [] .type empty return
  end
end
## addLater allow iterators to modify the underlying list

#end ## core