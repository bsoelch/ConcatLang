lib/iterator :

core #namespace

Iterator public struct{ A <>
  A list :list
  int    :index mut
}

^_ public proc( A <?> A list => A Iterator ){
  A list elements =:
  elements 0 A Iterator new
}

_^ public proc( A <?> A list => A Iterator ){
  A list elements =:
  elements elements .length A Iterator new
}

^> public proc( A <?> A Iterator => A Iterator A optional ){
  A Iterator mItr =:
  mItr
  mItr .index mItr .list .length < if{
    mItr .list mItr .index [] wrap ## push element
    mItr .index 1 + mItr .index = ## increment iterator
  else
    A empty return
  }
}

<^ public proc( A <?> A Iterator => A Iterator A optional ){
  A Iterator mItr =:
  mItr
  mItr .index 0 > if{
    mItr .index 1 - mItr .index = ## decrement iterator
    mItr .list mItr .index [] wrap ## push element
  else
    A empty return
  }
}
## addLater allow iterators to modify the underlying list

#end ## core