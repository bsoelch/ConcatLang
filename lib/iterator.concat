core #module

(list) int 2 tuple type iterator =$

^.. proc ## <?> list <index> -> <?> itr
  (list) elements =:
  elements 0 iterator new
end

..^ proc ## <?> list <index> -> <?> itr
  (list) elements =:
  elements elements length iterator new
end

^> proc ## <?> itr => <?> itr optional
  iterator mItr =:
  mItr
  if mItr 1 [] mItr 0 [] length < :
    mItr 0 [] mItr 1 [] [] wrap ## push element
    mItr  mItr 1 [] 1 +  1 [] = ## increment iterator
  else
    mItr 0 [] typeof empty return
  end
end

<^ proc ## <?> itr => <?> itr optional
  iterator mItr =:
  mItr
  if mItr 1 [] 0 > :
    mItr  mItr 1 [] 1 -  1 [] = ## decrement iterator
    mItr 0 [] mItr 1 [] [] wrap ## push element
  else
    mItr 0 [] typeof empty return
  end
end
## addLater allow iterators to modify the underlying list

#end ## core