lib/valueIO :

core #namespace

stack #include
io #include
io #import
numbers #include
utf8 #include


<<list public proc( A <?> string mut A list mut? => string mut ){
  A list mut? value =:
  '[' << res =::
  0 i =::
  while{ i value .length < do
    i 0 > if{
      res ", " <<* res =
    }
    res value i [] <<s res =
    i 1 + i =
  }
  res ']' << return
}
<<array public proc( A <?> string mut A array mut? => string mut ){
  A array mut? value =:
  '[' << res =::
  0 i =::
  while{ i value .length < do
    i 0 > if{
      res ", " <<* res =
    }
    res value i [] <<s res =
    i 1 + i =
  }
  res ']' << return
}
<<optional public proc( A <?> string mut A optional => string mut ){
  A optional value =:
  value if{
    #+value+# <<s " wrap" <<* return
  else
    value .type .content <<s " empty" <<* return
  }
}
<<s public proc( string mut var => string mut ){
  var value =:
  value .type string == ||{ value .type string mut == } if{
    value string cast <<* return
  else value .type ustring == ||{ value .type ustring mut == } if
    value ustring cast <<* return
  else value .type ( ) <= if
    '(' << res =::
    0 i =::
    while{ i value ( ) cast .length < do
      i 0 > if{
        res ", " <<* res =
      }
      res value ( ) cast i [] <<s res =
      i 1 + i =
    }
    res ')' << return
  else value .type .isList if
    value <<list return
  else value .type .isArray if
    value <<array return
  else value .type .isOptional if
    value <<optional return
  else value .type .isEnum if
    value .type .name <<* ' ' << value .type .fieldNames value uint cast [] <<* " ." <<* return
  else value .type type == if
    value type cast .isTuple if{
      value type cast .name <<* ## return tuple-name
    else value type cast .isProc if
      "( " <<* res =::
      value type cast .inTypes type list args mut =:
      0 i =::
      while{ i args .length < do
        res args i [] <<s " " <<* res =
        i 1 + i =
      }
      res "=> " <<* res =
      value type cast .outTypes args =
      0 i =
      while{ i args .length < do
        res args i [] <<s " " <<* res =
        i 1 + i =
      }
      res ")" <<*
    else value type cast .isList if
      value type cast .content
        dup byte == if{ drop
          "string" <<*
        else dup codepoint == if drop
          "ustring" <<*
        else
          #+content+# <<s " list" <<*
        }
    else value type cast .isArray if
      value type cast .content <<s " array" <<*
    else value type cast .isMemory if
      value type cast .content <<s " memory" <<*
    else value type cast .isOptional if
      value type cast .content <<s " optional" <<*
    else value type cast .isEnum if
      value type cast .name <<* ## return enum-name
    else value type cast .isUnion if
      "union( " <<* res =::
      value type cast .inTypes type list args =:
      0 i =::
      while{ i args .length < do
        res args i [] <<s " " <<* res =
        i 1 + i =
      }
      res ')' <<
    else value type == if
      "type"  <<*
    else value bool == if
      "bool"  <<*
    else value byte == if
      "byte"  <<*
    else value  int == if
      "int"   <<*
    else value uint == if
      "uint"  <<*
    else value float == if
      "float" <<*
    else value codepoint == if
      "codepoint" <<*
    else value var == if
      "var" <<*
    else unreachable }
    ##append mutability postfix
    value type cast .isMutable if{
      " mut" <<* return
    else value type cast .isMaybeMutable if
      " mut?" <<* return
    }
  else value .type bool == if
    value bool cast if{ "true" else "false" } <<* return
  else value .type byte == if
    value byte cast 0x80 byte cast < if{
      value byte cast << return ## print valid ascii-characters as character
    else
      value <<byte return ## print all other bytes as their byte-code
    }
  else value .type  int == if
    value <<i return
  else value .type uint == if
    value  <<u return
  else value .type float == if
    value <<f return
  else value .type codepoint == if
    value codepoint cast << return
  else value .type .isProc if
    ## procedure
    value .type <<s "@" <<* value refId <<X return
  else unreachable }
}
stringValue public proc( var => string mut ){
  var val =:
  16 string mut new  val <<s return
}

<<byte public proc( string mut byte => string mut ){
    byte value =:
    "0x" <<* value int cast  <<x return
}
byteToString public proc( byte => string mut ){
  byte value =:
  4 string mut new value <<byte return
}

byteListToString public proc( byte list => string mut ){
  byte list bytes =:
  bytes .length 6 * string mut new res =::
  res "[" <<* res =
  0 int i mut =:
  while{ i bytes .length < do
    i 0 > if{
      res ", " <<* res =
    }
    res bytes i [] <<byte res =
    i 1 + i =
  }
  res "]" <<* return
}

print   public proc( var      =>      ){      stringValue           puts        }
println public proc( var      =>      ){      stringValue '\n' <<  puts         }
fprint  public proc( var FILE => bool ){ swap stringValue swap     fputs return }

1 int IO_FLAG_PAD_0 =:
2 int IO_FLAG_ALIGN_LEFT =:
4 int IO_FLAG_SGN =:
8 int IO_FLAG_SGN_SPACE =:

Format struct{
  bool :isValue
}
## isValue:bool value:string$
FormatString struct{ Format extend
  string :value
}
##isValue:bool index:int flags:int w:int w_ptr:boolean p:int p_ptr:boolean b:int b_ptr:boolean format:byte (char)
FormatValue struct{ Format extend
  int  :index
  int  :flags
  int  :w
  bool :w_ptr
  int  :p
  bool :p_ptr
  int  :b
  bool :b_ptr
  byte :format
}

##TODO replace with append version
IO_printValue proc( FormatValue var array mut? => string mut ){ ## addLater runtime checks for correct types
  var array mut? values =:
  FormatValue format =:
  format .flags IO_FLAG_ALIGN_LEFT & 0 != bool alignLeft mut =:
  format .w_ptr if{ values format .w [] int cast else format .w } int width mut =:
  width 0 < if{ ##negative precision => alignment on left side
    alignLeft ! alignLeft =
    width -_ width =
  }
  format .p_ptr if{ values format .p  [] int cast else format .p  } int precision =:
  precision 0 < if{ ## 0 -> default
      "printf: precision has to be at greater that or equal to 0\n" eputs
      1 exit
  }
  format .b_ptr if{ values format .b  [] int cast else format .b  } #+base+# dup 0 == if{ drop 10 } int base =:
  '\0' byte plusSgn mut =:
  format .flags IO_FLAG_SGN & 0 != if{
    '+' plusSgn =
  else format .flags IO_FLAG_SGN_SPACE & 0 != if
    ' ' plusSgn =
  }
  format .format  switch{
  'b' case
    5 string mut new
    values format .index [] bool cast if{ "true" else "false" } <<*
    end-case
  'B' case
    5 string mut new
    values format .index [] bool cast if{ "TRUE" else "FALSE" } <<*
    end-case
  'i' case
    64 string mut new
    plusSgn '\0' != if{
      values format .index [] int cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] int cast base <<?i
    end-case
  'I' case
    64 string mut new
    plusSgn '\0' != if{
      values format .index [] int cast  0 >= if{
        plusSgn <<
      }
    }
    values format .index [] int cast  base <<?I
    end-case
  'u' case
    64 string mut new
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast base <<?u
    end-case
  'U' case
    64 string mut new
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast base <<?U
    end-case
  'd' case
    64 string mut new
    plusSgn '\0' != if{
      values format .index [] int cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] int cast <<i
    end-case
  'x' case
    16 string mut new
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast <<x
   end-case
  'X' case
    16 string mut new
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast <<X
    end-case
  'e' case
    32 string mut new
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??e
    end-case
  'E' case
    32 string mut new
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??E
    end-case
  'f' case
    32 string mut new
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??f
    end-case
  'F' case
    32 string mut new
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??F
    end-case
  'c' case
    1 string mut new values format .index [] byte cast <<
    end-case
  's' 'S' case
    values format .index [] stringValue
    end-case
  '%' case
    1 string mut new '%' <<
    end-case
  default
    32 string mut new
    format .format << " is no valid format specifier\n" <<* eputs
    1 exit
  } res =::
  res .length width < if{
    width res .length - int count =:
    format .flags IO_FLAG_PAD_0 & 0 != if{ '0' else ' ' } byte padChar =:
    count string mut new padding =::
    padding 0 count padChar fill
    alignLeft if{
      res padding <<* res =
    else
      padding res *>> res =
    }
  }
  res return
}

isFormatChar proc( #+char+# byte => bool ){
  byte c =:
  "bBiIuUdxXfFeEcsS%" string formats =:
  0 int i mut =:
  while{ i formats .length < do
    formats i [] c == if{
      true return
    }
    i 1 + i =
  }
  false
}

sprintf public proc( #+args+# var array mut? #+format+# string => string mut ){
  string format =:
  var array mut? args =:

  format .length 4 / Format list mut new parts =::
  0 int i0 mut =:
  0 int i mut =:
  format .length int n  =:
   0 int count mut =:
  -1 int maxFormat mut =:
  0 byte tmpC mut =:
  0 string mut new tmp =::
  while{ i0 n < do
    i0 i =
    while{ i format .length < &&{ format i [] '%' != } do
      i 1 + i =
    }
    i format .length >= if{
      parts   false format i0 format .length [:] FormatString new   << parts =
      n i0 =
    else
      parts   false format i0 i [:] FormatString new   << parts =
      i 1 + dup i0 = i =
      while{ i0 format .length < &&{ format i0 [] isFormatChar ! } do
        i0 1 + i0 =
      }
      i0 format .length >= if{
        64 string mut new
        "printf: unfinished or invalid format String: " <<* format i format .length [:] stringValue  <<* '\n' << eputs
        1 exit
      }
      format i0 [] byte _formatChar =:
      format i i0 [:] string _formatString =:
      i0 1 + i0 =
      _formatChar '%' == if{
        _formatString .length 0 > if{
          128 string mut new
          "printf: invalid Format String: \"" <<* _formatString <<*
           "\" format '%' does not allow any additional parameters\n" <<* eputs
           1 exit
        }
        parts   false "%" FormatString new   << parts =
      else
        count int  index mut =:
        count 1 +  count =
        0     int  flags mut =:
        0     int  w     mut =:
        false bool w_ptr mut =:
        0     int  p     mut =:
        false bool p_ptr mut =:
        0     int  b     mut =:
        false bool b_ptr mut =:
        0 i =
        tmp clear
        tmp _formatString .length ensureCap
        ## ([0-9]+$)?  index
        tmp while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
          _formatString i [] <<
          i 1 + i =
        } tmp =
        i _formatString .length < &&{ _formatString i [] '$' == } if{
          tmp parseInt index =
          tmp clear
        }
        ## ([-+ 0]+)? flags
        ## '-'  The result will be left-justified.
        ## '+'  The result will always include a sign
        ## ' '  The result will include a leading space for positive values
        ## '0'  The result will be zero-padded
        0 int i1 mut =:
        while{ i1 tmp .length < &&{ tmp i1 [] '0' == } do
          flags IO_FLAG_PAD_0 | flags =
          i1 1 + i1 =
        }
        tmp 0 i1 [:] clear
        tmp .length 0 == if{
          true while{ #+ loop condition (on stack) +# &&{ i _formatString .length < } do
            _formatString i [] tmpC =
            tmpC '-' == if{
              flags IO_FLAG_ALIGN_LEFT | flags =
              i 1 + i =
              true ## continue loop
            else tmpC '+' == if
              flags IO_FLAG_SGN | flags =
              i 1 + i =
              true ## continue loop
            else tmpC ' ' == if
              flags IO_FLAG_SGN_SPACE | flags =
              i 1 + i =
              true ## continue loop
            else tmpC '0' == if
              flags IO_FLAG_PAD_0 | flags =
              i 1 + i =
              true ## continue loop
            else
              false ## break loop
            }
          }
          tmp while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
        }
        ## ([0-9]+)? width
        tmp .length 0 > if{
          tmp parseInt w =
          tmp clear ## clear tmp
        else i _formatString .length < &&{ _formatString i [] '*' == } if ## *(<index>).
          i 1 + i =
          true w_ptr =
          count w =
          count 1 + count =
          tmp while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
          tmp .length 0 > if{
            tmp parseInt w =
            tmp clear ## clear tmp
          }
        }
        ## (.[0-9]+)? precision
        i _formatString .length < &&{ _formatString i [] '.' == } if{
               _formatChar 'f' ==  if{ else _formatChar 'F' == if
          else _formatChar 'e' == if else _formatChar 'E' == if
          else
            128 string mut new
            "printf: invalid Format String: \"" <<* _formatString <<* _formatChar <<
                             "\" precision-parameter only allowed for formats f, F, e, E, s and S\n" <<* eputs
            1 exit
          }
          i 1 + i =
          i _formatString .length < &&{ _formatString i [] '*' == } if{
            i 1 + i =
            true p_ptr =
            count p =
            count 1 + count =
          }
          tmp while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
          p_ptr ! ||{ tmp .length 0 > } if{
            tmp parseInt p =
            tmp clear ## clear tmp
          }
        }
        ## '('[0-9]+')' base
        i _formatString .length < &&{ _formatString i [] '(' == } if{
               _formatChar 'i' ==  if{ else _formatChar 'I' == if
          else _formatChar 'u' == if else _formatChar 'U' == if
          else _formatChar 'f' == if else _formatChar 'F' == if
          else _formatChar 'e' == if else _formatChar 'E' == if
          else
            128 string mut new
            "printf: invalid Format String: \"" <<* _formatString <<* _formatChar <<
                             "\" base-parameter only allowed for formats i,u,f,e and s\n" <<* eputs
            1 exit
          }
          i 1 + i =
          i _formatString .length < &&{ _formatString i [] '*' == } if{
            i 1 + i =
            true b_ptr =
            count b =
            count 1 + count =
          }
          tmp while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
          i _formatString .length < &&{ _formatString i [] ')' == } if{
            b_ptr ! ||{ tmp .length 0 > } if{
              tmp parseInt b =
              tmp clear ## clear tmp
            }
            i 1 + i =
          else
            64 string mut new
            "printf: invalid Format String: \"" <<* _formatString <<* _formatChar << "\"\n" <<* eputs
            1 exit
          }
        }
        i _formatString .length < ||{ tmp .length 0 > } if{
          64 string mut new
          "printf: invalid Format String: \"" <<* _formatString <<* _formatChar << "\"\n" <<* eputs
          1 exit
        }
        parts   true index flags w w_ptr p p_ptr b b_ptr _formatChar FormatValue new   << parts =
        maxFormat index < if{
          index maxFormat =
        }
        w_ptr if{
          maxFormat w < if{
            w maxFormat =
          }
        }
        p_ptr if{
          maxFormat p < if{
            p maxFormat =
          }
        }
        b_ptr if{
          maxFormat b < if{
            b maxFormat =
          }
        }
      }
    }
  }
  maxFormat 1 + count =
  count args .length != if{
    64 string mut new
    "wrong number of arguments: " <<* args .length <<i " expected " <<* count <<i
    '\n' << eputs
    1 exit
  }
  0 i =
  while{ i parts .length < do
    tmp
    parts i [] .isValue if{   ## Value format
      parts i [] args IO_printValue
    else ## string format
      parts i [] FormatString cast .value
    }
    <<* tmp =
    i 1 + i =
  }
  tmp return
}

printf public proc( var array mut?  string => ){
  sprintf puts
}
fprintf public proc( var array mut?  string FILE => bool ){
  FILE file =:
  sprintf file fputs return
}

#end ##core