lib/valueIO :

core #namespace

stack #include
io #include
io #import
numbers #include
utf8 #include
arraySlice #include
list #include

<<array public proc( A <?> StringBuilder A array mut? => StringBuilder ){
  A array mut? value =:
  '[' << res mut =::
  0 i mut =::
  while{ i value .length < do
    i 0 > if{
      res ", " <<* res =
    }
    res value i [] <<s res =
    i 1 + i =
  }
  res ']' << return
}
<<optional public proc( A <?> StringBuilder A optional => StringBuilder ){
  A optional value =:
  value if{
    #+value+# <<s " wrap" <<* return
  else
    value .type .content <<s " empty" <<* return
  }
}
<<s public proc( StringBuilder var => StringBuilder ){
  var value =:
  value .type .isArray ||{ value .type .isMemory } &&{ value .type .content byte == } if{
    value string mut? cast <<* return
  else value .type .isArray ||{ value .type .isMemory } &&{ value .type .content codepoint == }  if
    value ustring mut? cast <<* return
  else value .type .isTuple if
    value ( ) cast .elements elements =::
    0 i mut =::
    '(' <<
    while{ i elements .length < do
      i 0 > if{
        ", " <<*
      }
      elements i [] <<s
      i 1 + i =
    }
    ')' << return
  else value .type .isStruct if
    value .type sType =::
    sType .fieldNames fields =::
    0 i mut =::
    '(' <<
    while{ i fields .length < do
      i 0 > if{
        ", " <<*
      }
      fields i [] <<* ':' << value i sType .getField <<s
      i 1 + i =
    }
    ')' << return
  else value .type .isArray ||{ value .type .isMemory } if
    value <<array return
  else value .type .isOptional if
    value <<optional return
  else value .type .isEnum if
    value .type .name <<* ' ' << value .type .fieldNames value uint cast [] <<* " ." <<* return
  else value .type .isProc if
    ## procedure
    value .type <<s "@" <<* value refId <<X return
  else
    value .type switch{
    type case
      value type cast .genericArguments args mut =::
      0 i mut =::
      while{ i args .length < do
          args i [] <<s " " <<*
          i 1 + i =
      }
      value type cast .isStruct if{
        value type cast .name <<*
      else value type cast .isTuple if
        value type cast .outTypes args =
        0 i =
        "( " <<*
        while{ i args .length < do
          args i [] <<s " " <<*
          i 1 + i =
        }
        ")" <<*
      else value type cast .isProc if
        value type cast .inTypes args =
        0 i =
        "( " <<*
        while{ i args .length < do
          args i [] <<s " " <<*
          i 1 + i =
        }
        "=> " <<*
        value type cast .outTypes args =
        0 i =
        while{ i args .length < do
          args i [] <<s " " <<*
          i 1 + i =
        }
        ")" <<*
      else value type cast .isArray if
        #+content is generic parameter+# "array" <<*
      else value type cast .isMemory if
        #+content is generic parameter+# "memory" <<*
      else value type cast .isOptional if
        #+content is generic parameter+# "optional" <<*
      else value type cast .isEnum if
        value type cast .name <<* ## return enum-name
      else value type cast .isUnion if
        value type cast .inTypes args =
        0 i =
        "union( " <<*
        while{ i args .length < do
          args i [] <<s " " <<*
          i 1 + i =
        }
        ')' <<
      else
        value type cast switch{
        type case
          "type" <<*
          end-case
        bool case
          "bool" <<*
          end-case
        byte case
          "byte" <<*
          end-case
        int case
          "int" <<*
          end-case
        uint case
          "uint" <<*
          end-case
        float case
          "float" <<*
          end-case
        codepoint case
          "codepoint" <<*
          end-case
        bits8 case
          "bits8" <<*
          end-case
        bits16 case
          "bits16" <<*
          end-case
        bits32 case
          "bits32" <<*
          end-case
        bits64 case
          "bits64" <<*
          end-case
        bits128 case
          "bits128" <<*
          end-case
        bits192 case
          "bits192" <<*
          end-case
        bits256 case
          "bits256" <<*
          end-case
        bitsPtr case
          "bitsPtr" <<*
          end-case
        var case
          "var" <<*
          end-case
        default
          unreachable
        }
      }
      ##append mutability postfix
      value type cast .isMutable if{
        " mut" <<* return
      else value type cast .isMaybeMutable if
        " mut?" <<* return
      }
      end-case
    bool case
      value bool cast if{ "true" else "false" } <<* return
      end-case
    byte case
      value byte cast 0x80 byte cast < if{
        value byte cast << return ## print valid ascii-characters as character
      else
        value <<byte return ## print all other bytes as their byte-code
      }
      end-case
    int case
      value <<i return
      end-case
    uint case
      value  <<u return
      end-case
    float case
      value <<f return
      end-case
    codepoint case
      value codepoint cast << return
      end-case
    default
      unreachable
    }
  }
}
stringValue public proc( var => string ){
  var val =:
  64 buildString val <<s .build return
}

<<byte public proc( StringBuilder byte => StringBuilder ){
    byte value =:
    "0x" <<* value int cast  <<x return
}
byteToString public proc( byte => string ){
  byte value =:
  4 buildString value <<byte .build return
}

byteArrayToString public proc( byte array mut? => string ){
  byte array mut? bytes =:
  bytes .length 6 * buildString StringBuilder res mut =:
  res "[" <<* res =
  0 int i mut =:
  while{ i bytes .length < do
    i 0 > if{
      res ", " <<* res =
    }
    res bytes i [] <<byte res =
    i 1 + i =
  }
  res "]" <<* .build return
}

print   public proc( var      =>      ){      stringValue           puts        }
println public proc( var      =>      ){
  var val =:
  64 buildString val <<s '\n' << .build puts
}
fprint  public proc( var FILE => bool ){ swap stringValue swap     fputs return }

1 int IO_FLAG_PAD_0 =:
2 int IO_FLAG_ALIGN_LEFT =:
4 int IO_FLAG_SGN =:
8 int IO_FLAG_SGN_SPACE =:

Format struct{
  bool :isValue
}
## isValue:bool value:string$
FormatString struct{ Format extend
  byte arraySlice :value
}
##isValue:bool index:int flags:int w:int w_ptr:boolean p:int p_ptr:boolean b:int b_ptr:boolean format:byte (char)
FormatValue struct{ Format extend
  int  :index
  int  :flags
  int  :w
  bool :w_ptr
  int  :p
  bool :p_ptr
  int  :b
  bool :b_ptr
  byte :format
}

##TODO replace with append version
IO_printValue proc( FormatValue var array mut? => string ){ ## addLater runtime checks for correct types
  var array mut? values =:
  FormatValue format =:
  format .flags IO_FLAG_ALIGN_LEFT & 0 != bool alignLeft mut =:
  format .w_ptr if{ values format .w [] int cast else format .w } int width mut =:
  width 0 < if{ ##negative precision => alignment on left side
    alignLeft ! alignLeft =
    width -_ width =
  }
  format .p_ptr if{ values format .p  [] int cast else format .p  } int precision =:
  precision 0 < if{ ## 0 -> default
      "printf: precision has to be at greater that or equal to 0\n" eputs
      1 exit
  }
  format .b_ptr if{ values format .b  [] int cast else format .b  } #+base+# dup 0 == if{ drop 10 } int base =:
  '\0' byte plusSgn mut =:
  format .flags IO_FLAG_SGN & 0 != if{
    '+' plusSgn =
  else format .flags IO_FLAG_SGN_SPACE & 0 != if
    ' ' plusSgn =
  }
  format .format  switch{
  'b' case
    5 buildString
    values format .index [] bool cast if{ "true" else "false" } <<* StringBuilder cast
    end-case
  'B' case
    5 buildString
    values format .index [] bool cast if{ "TRUE" else "FALSE" } <<* StringBuilder cast
    end-case
  'i' case
    64 buildString
    plusSgn '\0' != if{
      values format .index [] int cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] int cast base <<?i
    end-case
  'I' case
    64 buildString
    plusSgn '\0' != if{
      values format .index [] int cast  0 >= if{
        plusSgn <<
      }
    }
    values format .index [] int cast  base <<?I
    end-case
  'u' case
    64 buildString
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast base <<?u
    end-case
  'U' case
    64 buildString
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast base <<?U
    end-case
  'd' case
    64 buildString
    plusSgn '\0' != if{
      values format .index [] int cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] int cast <<i
    end-case
  'x' case
    16 buildString
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast <<x
   end-case
  'X' case
    16 buildString
    plusSgn '\0' != if{
      plusSgn <<
    }
    values format .index [] uint cast <<X
    end-case
  'e' case
    32 buildString
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??e
    end-case
  'E' case
    32 buildString
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??E
    end-case
  'f' case
    32 buildString
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??f
    end-case
  'F' case
    32 buildString
    plusSgn '\0' != if{
      values format .index [] float cast 0 >= if{
        plusSgn <<
      }
    }
    values format .index [] float cast precision base <<??F
    end-case
  'c' case
    1 buildString values format .index [] byte cast << StringBuilder cast
    end-case
  's' 'S' case
    0 buildString values format .index [] stringValue <<* StringBuilder cast
    end-case
  '%' case
    1 buildString '%' << StringBuilder cast
    end-case
  default
    32 buildString
    format .format << " is no valid format specifier\n" <<* .build eputs
    1 exit
  } res mut =::
  res .length width < if{
    width res .length - int count =:
    format .flags IO_FLAG_PAD_0 & 0 != if{ '0' else ' ' } byte padChar =:
    padChar count string new padding =::
    alignLeft if{
      res padding <<* res =
    else
      padding res *>> res =
    }
  }
  res .build return
}

isFormatChar proc( #+char+# byte => bool ){
  byte c =:
  "bBiIuUdxXfFeEcsS%" string formats =:
  0 int i mut =:
  while{ i formats .length < do
    formats i [] c == if{
      true return
    }
    i 1 + i =
  }
  false
}

sprintf public proc( #+args+# var array mut? #+format+# string => string ){
  string format =:
  var array mut? args =:

  format .length 4 / Format newList parts mut =::
  0 int i0 mut =:
  0 int i mut =:
  format .length int n  =:
   0 int count mut =:
  -1 int maxFormat mut =:
  0 byte tmpC mut =:
  0 buildString tmp mut =::
  while{ i0 n < do
    i0 i =
    while{ i format .length < &&{ format i [] '%' != } do
      i 1 + i =
    }
    i format .length >= if{
      parts   false format i0 format .length [:] FormatString new   << parts =
      n i0 =
    else
      parts   false format i0 i [:] FormatString new   << parts =
      i 1 + dup i0 = i =
      while{ i0 format .length < &&{ format i0 [] isFormatChar ! } do
        i0 1 + i0 =
      }
      i0 format .length >= if{
        64 buildString
        "printf: unfinished or invalid format String: " <<* format i format .length [:] stringValue  <<* '\n' << .build eputs
        1 exit
      }
      format i0 [] byte _formatChar =:
      format i i0 [:] byte arraySlice _formatString =:
      i0 1 + i0 =
      _formatChar '%' == if{
        _formatString .length 0 > if{
          128 buildString
          "printf: invalid Format String: \"" <<* _formatString <<*
           "\" format '%' does not allow any additional parameters\n" <<* .build eputs
           1 exit
        }
        parts   false "%" 0 1 [:] FormatString new   << parts = ## TODO? don't use new string for slice
      else
        count int  index mut =:
        count 1 +  count =
        0     int  flags mut =:
        0     int  w     mut =:
        false bool w_ptr mut =:
        0     int  p     mut =:
        false bool p_ptr mut =:
        0     int  b     mut =:
        false bool b_ptr mut =:
        0 i =
        tmp clear
        _formatString .length  tmp .ensureCap
        ## ([0-9]+$)?  index
        tmp .. while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
          _formatString i [] <<
          i 1 + i =
        } tmp =
        i _formatString .length < &&{ _formatString i [] '$' == } if{
          tmp .build parseInt index =
          tmp clear
        }
        ## ([-+ 0]+)? flags
        ## '-'  The result will be left-justified.
        ## '+'  The result will always include a sign
        ## ' '  The result will include a leading space for positive values
        ## '0'  The result will be zero-padded
        0 int i1 mut =:
        while{ i1 tmp length < &&{ tmp i1 [] '0' == } do
          flags IO_FLAG_PAD_0 | flags =
          i1 1 + i1 =
        }
        tmp 0 i1 [:] clear
        tmp length 0 == if{
          true while{ #+ loop condition (on stack) +# &&{ i _formatString .length < } do
            _formatString i [] tmpC =
            tmpC '-' == if{
              flags IO_FLAG_ALIGN_LEFT | flags =
              i 1 + i =
              true ## continue loop
            else tmpC '+' == if
              flags IO_FLAG_SGN | flags =
              i 1 + i =
              true ## continue loop
            else tmpC ' ' == if
              flags IO_FLAG_SGN_SPACE | flags =
              i 1 + i =
              true ## continue loop
            else tmpC '0' == if
              flags IO_FLAG_PAD_0 | flags =
              i 1 + i =
              true ## continue loop
            else
              false ## break loop
            }
          }
          tmp .. while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
        }
        ## ([0-9]+)? width
        tmp length 0 > if{
          tmp .build parseInt w =
          tmp clear ## clear tmp
        else i _formatString .length < &&{ _formatString i [] '*' == } if ## *(<index>).
          i 1 + i =
          true w_ptr =
          count w =
          count 1 + count =
          tmp .. while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
          tmp length 0 > if{
            tmp .build parseInt w =
            tmp clear ## clear tmp
          }
        }
        ## (.[0-9]+)? precision
        i _formatString .length < &&{ _formatString i [] '.' == } if{
               _formatChar 'f' ==  if{ else _formatChar 'F' == if
          else _formatChar 'e' == if else _formatChar 'E' == if
          else
            128 buildString
            "printf: invalid Format String: \"" <<* _formatString <<* _formatChar <<
                             "\" precision-parameter only allowed for formats f, F, e, E, s and S\n" <<* .build eputs
            1 exit
          }
          i 1 + i =
          i _formatString .length < &&{ _formatString i [] '*' == } if{
            i 1 + i =
            true p_ptr =
            count p =
            count 1 + count =
          }
          tmp .. while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
          p_ptr ! ||{ tmp length 0 > } if{
            tmp .build parseInt p =
            tmp clear ## clear tmp
          }
        }
        ## '('[0-9]+')' base
        i _formatString .length < &&{ _formatString i [] '(' == } if{
               _formatChar 'i' ==  if{ else _formatChar 'I' == if
          else _formatChar 'u' == if else _formatChar 'U' == if
          else _formatChar 'f' == if else _formatChar 'F' == if
          else _formatChar 'e' == if else _formatChar 'E' == if
          else
            128 buildString
            "printf: invalid Format String: \"" <<* _formatString <<* _formatChar <<
                             "\" base-parameter only allowed for formats i,u,f,e and s\n" <<* .build eputs
            1 exit
          }
          i 1 + i =
          i _formatString .length < &&{ _formatString i [] '*' == } if{
            i 1 + i =
            true b_ptr =
            count b =
            count 1 + count =
          }
          tmp .. while{ i _formatString .length < &&{ '0' _formatString i [] <= &&{ '9' _formatString i [] >= } } do
            _formatString i [] <<
            i 1 + i =
          } tmp =
          i _formatString .length < &&{ _formatString i [] ')' == } if{
            b_ptr ! ||{ tmp length 0 > } if{
              tmp .build parseInt b =
              tmp clear ## clear tmp
            }
            i 1 + i =
          else
            64 buildString
            "printf: invalid Format String: \"" <<* _formatString <<* _formatChar << "\"\n" <<* .build eputs
            1 exit
          }
        }
        i _formatString .length < ||{ tmp length 0 > } if{
          64 buildString
          "printf: invalid Format String: \"" <<* _formatString <<* _formatChar << "\"\n" <<* .build eputs
          1 exit
        }
        parts   true index flags w w_ptr p p_ptr b b_ptr _formatChar FormatValue new   << parts =
        maxFormat index < if{
          index maxFormat =
        }
        w_ptr if{
          maxFormat w < if{
            w maxFormat =
          }
        }
        p_ptr if{
          maxFormat p < if{
            p maxFormat =
          }
        }
        b_ptr if{
          maxFormat b < if{
            b maxFormat =
          }
        }
      }
    }
  }
  maxFormat 1 + count =
  count args .length != if{
    64 buildString
    "wrong number of arguments: " <<* args .length <<i " expected " <<* count <<i
    '\n' << .build eputs
    1 exit
  }
  0 i =
  while{ i parts length < do
    tmp
    parts i [] .isValue if{   ## Value format
      parts i [] args IO_printValue <<*
    else ## string format
      parts i [] FormatString cast .value <<*
    }
    tmp =
    i 1 + i =
  }
  tmp .build return
}

printf public proc( var array mut?  string => ){
  sprintf puts
}
fprintf public proc( var array mut?  string FILE => bool ){
  FILE file =:
  sprintf file fputs return
}

#end ##core