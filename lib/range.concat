lib/range :

core #namespace
stack #include
codeblocks #include
iterator #include

intRange public struct{ int Iterator extend
  @intRange.^> :^> pseudo

  int :off  restricted
  int :step restricted
  int :to   restricted
}
[n] public proc( int => intRange ){
  n =::
  n 0 > if{
    0 1 n intRange new return
  else
    n 1 0 intRange new return
  }
}
[n:m] public proc( int int => intRange ){
  m =::
  n =::
  n 1 m intRange new return
}
[n:k:m] public proc( int int int => intRange ){
  m =::
  k =::
  n =::
  n k m intRange new return
}

## pseudo-field
intRange.^> private proc( intRange => intRange int optional ){
  prev =::
  prev .step 0 < if{
    prev .off prev .to > if{
      prev .off prev .step + next =::
      next prev .step prev .to [n:k:m]   prev .off wrap return
    }
  else
    prev .off prev .to < if{
      prev .off prev .step + next =::
      next prev .step prev .to [n:k:m]   prev .off wrap return
    }
  }
  prev int empty return
}

#end