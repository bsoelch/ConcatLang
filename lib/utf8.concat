lib/utf8 :

core #namespace

stack #include
types #include
io #include
numbers  #include


<< public proc( mut-string codepoint => mut-string ){
  uint cp =:
  str =::
       cp 0x80    < if{   ## ascii - character
    str cp byte cast << return
  else cp 0x800   < if  ## 2-byte blocks
    str cp 6 >>          0xc0 | byte cast <<
        cp        0x3f & 0x80 | byte cast << return
  else cp 0x10000 < if  ## 3-byte blocks
    str cp 12 >>         0xe0 | byte cast <<
        cp  6 >>  0x3f & 0x80 | byte cast <<
        cp        0x3f & 0x80 | byte cast << return
  else cp 0x10ffff < if ## 4-byte blocks
    str cp 18 >>         0xf0 | byte cast <<
        cp 12 >>  0x3f & 0x80 | byte cast <<
        cp  6 >>  0x3f & 0x80 | byte cast <<
        cp        0x3f & 0x80 | byte cast << return
  else
    ## don't exit on invalid codepoints, only display waring message
    35 mut-string new
    "Codepoint out of range: 0x" <<* cp int cast <<X '\n' << eputs
    str return
  }
}

>> public proc( codepoint mut-string => mut-string ){
  str =::
  cp =::
  str 0 0 [:] cp << drop
  str return
}

<<* public proc( mut-string mut?-ustring => mut-string ){
  append =::
  value  =::
  value value .length append .length + ensureCap
  0 int mut i =:
  while{ i append .length < do
    value append i [] << value =
    i 1 + i =
  }
  value return
}
*>> public proc( mut?-ustring mut-string => mut-string ){
  value =::
  append =::
  value value .length append .length + ensureCap
  append .length 1 - int mut i =:
  while{ i 0 >= do
    append i [] value >> value =
    i 1 - i =
  }
  value return
}

<<* public proc( mut-ustring mut?-string => mut-ustring ){
  append =::
  value  =::
  value value .length append .length + ensureCap
  append 0u
  while{ nextCodepoint do
    value swap << value =
  } 3 $drop ## drop remaining data
  value return
}
*>> public proc( mut?-string mut-ustring => mut-ustring ){
  value  =::
  append =::
  value 0 0 [:] append <<* drop
  value return
}

codepointToString public proc( codepoint => mut-string ){
  4 mut-string new swap << return
}

codepointsToString public proc( mut?-ustring => mut-string ){
  ustring source =:
  source .length mut-string new source <<* return
}

#+
gets the first full codepoint in the given string that starts at or after index,
returns true/false depending of if there was a next codepoint
the value of the read codepoint (of 0 if the end of the string was reached)
followed by the index after the next codepoint and the string
+#
nextCodepoint public proc( mut?-string #+index+# uint => string #+end+# uint #+next+# codepoint #+has next+# bool ){
  uint   mut index =:
  string value =:
  while{ index value .length < &&{ value index [] int cast 0xc0 & 0x80 == } do
    index 1 + index = ## skip parts of unfinished codepoint
  }
  while{ index value .length < do
    value index [] int mut char =:
    char 0x80 & 0 == if{ ## ascii - character
      value  index 1u +  char codepoint cast  true return
    else ## multi - char codepoint
      0 while{ char 0x80 & 0 != do
        char 1 << char =
        1 +
      }
      int mut count =:
      char 0xff & count >> int mut res =:
      index count + value .length > if{
        value value .length  0 codepoint cast  false return
      }
      count 1 - count =
      while{
        index 1 + index =
        count 1 - count =
        value index [] char =
        char 0xc0 & 0x80 == if{
          res 6 <<  char 0x3f &  | res =
        else
          index count + index =
           0 count =
          -1 res =
        }
        count 0 >
      do }
      res 0 >= &&{ res 0x10ffff <= } if{
        value index  res codepoint cast  true return
      }
    }
  }
  value index  0 codepoint cast  false return
}

codepoints public proc( mut?-string => mut-ustring ){
  string source =:
  source .length mut-ustring new source <<* return
}

#end ##core