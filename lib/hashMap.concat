hashMap #module

stack #include
codeblocks #include
core #import

_Empty_Tuple tuple end

hashCode proc var => int :
  var value =:
  value typeof type valType =:
  valType (list) <= || valType _Empty_Tuple <= end if ## addLater? use list-hash for tuple/enum-types
    0 int hash =:
    0 int i =:
    while i value length < do
      hash 31 * value i [] hashCode + hash =
      i 1 + i =
    end
    hash
  else
    value refId
  end
end

MapEntry tuple var var end
MapEntry.key   proc MapEntry => var : 0 [] end
MapEntry.value proc MapEntry => var : 1 [] end

_Entry tuple var var MapEntry optional end ## use MapEntry instead of _Entry because self-containing tuples are not supported
_Entry.val=  proc _Entry var =>               : 1 [] = end
_Entry.next  proc _Entry => MapEntry optional : 2 []   end
_Entry.next= proc _Entry MapEntry optional => : 2 [] = end

HashMap tuple type type _Entry optional list int end
_Map.keyType proc HashMap => type                 : 0 [] end
_Map.valType proc HashMap => type                 : 1 [] end
_Map.data    proc HashMap => _Entry optional list : 2 [] end
HashMap.size proc HashMap => int                  : 3 [] end
_Map.incSize proc HashMap => : dup 3 [] 1 + 3 [] = end
_Map.decSize proc HashMap => : dup 3 [] 1 - 3 [] = end

newHashMap proc #+keyType+# type #+valType+# type #+cap+# int => HashMap :
  int cap =:
  type valType =:
  type keyType =:
  cap _Entry optional list new _Entry optional list data =:
  data 0 cap _Entry empty fill
  keyType valType data 0 HashMap new
end

HashMap.put proc #+map+# HashMap #+key+# var #+value+# var => #+prevVal+# var optional :
  var value =:
  var key =:
  HashMap map =:
  ## cast elements to correct types
  value map _Map.valType cast value =
  key   map _Map.keyType cast key =
  key hashCode uint hash =:
  hash map _Map.data length % uint i =:
  map _Map.data i [] ?? if
    unwrap _Entry entry =:
    while entry _Entry.next ?? do
      entry MapEntry.key key == if drop ##drop next
        ##replace does not change size
        entry MapEntry.value
        entry value _Entry.val=
        wrap return
      end
      unwrap entry =
    end drop ##drop last entry
    entry MapEntry.key key == if
      ##replace does not change size
      entry MapEntry.value
      entry value _Entry.val=
      wrap return
    else
      entry key value _Entry empty _Entry new wrap _Entry.next=
      map _Map.incSize
      map _Map.valType empty return
    end
  else drop
    map _Map.data  key value _Entry empty _Entry new wrap i [] =
    map _Map.incSize
    map _Map.valType empty return
  end
end

HashMap.contains proc #+map+# HashMap #+key+# var => bool :
  var key =:
  HashMap map =:
  key hashCode uint hash =:
  hash map _Map.data length % uint i =:
  map _Map.data i [] _Entry optional entry =:
  while entry ?? do
    unwrap _Entry unwrapped =:
    unwrapped MapEntry.key key == if
      true return
    end
    unwrapped _Entry.next entry =
  end drop
  false return
end

HashMap.get proc #+map+# HashMap #+key+# var => #+value+# var optional :
  var key =:
  HashMap map =:
  key hashCode uint hash =:
  hash map _Map.data length % uint i =:
  map _Map.data i [] _Entry optional entry =:
  while entry ?? do
    unwrap _Entry unwrapped =:
    unwrapped MapEntry.key key == if
      unwrapped MapEntry.value wrap return
    end
    unwrapped _Entry.next entry =
  end drop
  map _Map.valType empty return
end

HashMap.remove proc #+map+# HashMap #+key+# var => #+prevVal+# var optional :
  var key =:
  HashMap map =:
  key hashCode uint hash =:
  hash map _Map.data length % uint i =:
  map _Map.data i [] ?? if
    unwrap _Entry entry =:
    entry MapEntry.key key == if
      map _Map.decSize
      entry MapEntry.value ## get previous value
      map _Map.data   entry _Entry.next  i [] = ## remove entry
      wrap return
    else
      while entry _Entry.next ?? do
        unwrap _Entry next =:
        next MapEntry.key key == if
          map _Map.decSize
          next MapEntry.value ## get previous value
          entry   next _Entry.next  _Entry.next= ## remove entry
          wrap return
        end
        entry _Entry.next entry =
      end drop
      map _Map.valType empty return
    end
  else drop
    map _Map.valType empty return
  end
end

HashMapItr tuple HashMap #+index+# int #+next+# _Entry optional end
_HashMapItr.map   proc HashMapItr => HashMap         : 0 []   end
_HashMapItr.i     proc HashMapItr => int             : 1 []   end
_HashMapItr.next  proc HashMapItr => _Entry optional : 2 []   end
_HashMapItr.next= proc HashMapItr _Entry optional => : 2 [] = end
_HashMapItr.incI  proc HashMapItr => :    dup 1 [] 1 + 1 [] = end

HashMap.itr proc HashMap => HashMapItr :
  #+map+# -1 _Entry empty HashMapItr new return
end
HashMapItr.next proc HashMapItr => HashMapItr MapEntry optional :
  HashMapItr itr =:
  while itr _HashMapItr.next ?? ! do drop ##drop empty-entry
    itr _HashMapItr.incI
    itr _HashMapItr.i itr _HashMapItr.map _Map.data length >= if
      itr MapEntry empty return
    end
    itr  itr _HashMapItr.map _Map.data itr _HashMapItr.i []  _HashMapItr.next=
  end
  #+ itr _HashMapItr.next +# MapEntry optional res =:
  itr  itr _HashMapItr.next unwrap _Entry.next  _HashMapItr.next=
  itr res return
end

## addLater? HashMap.listEntries
## addLater? HashMap.toString
## addLater? (automatically) duplicate capacity

#end ## hashMap