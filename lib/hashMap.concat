lib/hashMap :

hashMap #namespace

stack #include
codeblocks #include
iterator #include
core #import

arrayHash public proc( A <?> A array mut? => uint ){
  A array mut? value =:
  0 uint hash mut =:
  0 uint i mut =:
  while{ i value .length < do
    hash 31 * value i [] hashCode + hash =
    i 1 + i =
  }
  hash return
}
hashCode public proc( var => uint ){
  var value =:
  value .type type valType =:
  ## addLater? use array-hash for tuple/enum-types
  valType .isArray ||{ valType .isMemory } if{
    value arrayHash return
  else valType .isTuple if
    value ( ) cast .elements arrayHash return
  else valType .isStruct if
    value .type sType =::
    sType .fieldNames .length n =::
    0 uint hash mut =:
    0 uint i mut =:
    while{ i n < do
      hash 31 *   value i sType .getField  hashCode + hash =
      i 1 + i =
    }
    hash return
  else
    value refId
  }
}

MapEntry public struct{ K <> V <>
  K :key   restricted mut
  V :value restricted mut
}

HashMapEntry struct{ K <> V <> K V MapEntry extend
  K V MapEntry mut optional :next mut ## use MapEntry instead of HashMapEntry because self-containing structs are not supported
}

HashMap public struct{ K <> V <>
  K V HashMapEntry mut optional array mut :data private ## addLater? (automatically) adjust capacity if size gets to large
  int                                     :size restricted mut
}
HashMap.incSize proc( K <?> V <?> K V HashMap mut => ){ dup .size 1 + swap .size = }
HashMap.decSize proc( K <?> V <?> K V HashMap mut => ){ dup .size 1 - swap .size = }

newHashMap public proc( #+keyType+# K <> #+valType+# V <> #+cap+# int => K V HashMap mut ){
  int cap =:
  K V HashMapEntry mut empty  cap  K V HashMapEntry mut optional array mut new data =::
  data 0 K V HashMap mut new
}

HashMap.put public proc( K <?> V <?> #+value+# V #+map+# K V HashMap mut #+key+# K => #+prevVal+# V optional ){
  K key =:
  K V HashMap mut hMap =:
  V value =:
  key hashCode uint hash =:
  hash hMap .data .length % uint i =:
  hMap .data i [] if{
    K V HashMapEntry mut entry mut =:
    while{ entry .next do
      entry .key key == if{ drop ##drop next
        ##replace does not change size
        entry .value ..
        value entry .value =
        wrap return
      }
      entry =
    } ##drop last entry
    entry .key key == if{
      ##replace does not change size
      entry .value .. ## get value, not reference to value
      value entry .value =
      wrap return
    else
      key value K V HashMapEntry mut empty K V HashMapEntry mut new wrap  entry .next =
      hMap HashMap.incSize
      V empty return
    }
  else
    key value K V HashMapEntry mut empty K V HashMapEntry mut new wrap   hMap .data i [] =
    hMap HashMap.incSize
    V empty return
  }
}

[]= public proc( K <?> V <?> #+value+# V #+map+# K V HashMap mut #+key+# K => #+prevVal+# V optional ){
  HashMap.put return
}

HashMap.contains public proc( K <?> V <?> #+map+# K V HashMap mut? #+key+# K => bool ){
  K key =:
  K V HashMap mut? hMap =:
  key hashCode uint hash =:
  hash hMap .data .length % uint i =:
  hMap .data i [] K V HashMapEntry mut optional entry mut =:
  while{ entry do
    K V HashMapEntry mut unwrapped =:
    unwrapped .key key == if{
      true return
    }
    unwrapped .next entry =
  }
  false return
}

HashMap.get public proc( K <?> V <?> #+map+# K V HashMap mut? #+key+# K => #+value+# V optional ){
  K key =:
  K V HashMap mut? hMap =:
  key hashCode uint hash =:
  hash hMap .data .length % uint i =:
  hMap .data i [] K V HashMapEntry mut optional entry mut =:
  while{ entry do
    K V HashMapEntry mut unwrapped =:
    unwrapped .key key == if{
      unwrapped .value wrap return
    }
    unwrapped .next entry =
  }
  V empty return
}
[] public proc( K <?> V <?> #+map+# K V HashMap mut? #+key+# K => #+value+# V optional ){
  HashMap.get return
}

HashMap.remove public proc( K <?> V <?> #+map+# K V HashMap mut #+key+# K => #+prevVal+# V optional ){
  K key =:
  K V HashMap mut hMap =:
  key hashCode uint hash =:
  hash hMap .data .length % uint i =:
  hMap .data i [] if{
    K V HashMapEntry mut entry mut =:
    entry .key key == if{
      hMap HashMap.decSize
      entry .value ## get previous value
      entry .next K V HashMapEntry mut optional cast  hMap .data i [] = ## remove entry
      wrap return
    else
      while{ entry .next do
        K V HashMapEntry mut next =:
        next .key key == if{
          hMap HashMap.decSize
          next .value ## get previous value
          next .next  entry .next = ## remove entry
          wrap return
        }
        next entry =
      }
      V empty return
    }
  else
    V empty return
  }
}

HashMapItr struct{ K <> V <>
  K V HashMap mut?              :map   private
  int                           :index private
  K V HashMapEntry mut optional :next  private
}

^_ public proc( K <?> V <?> K V HashMap mut? => K V MapEntry Iterator ){
  #+map+# -1 K V HashMapEntry mut empty K V HashMapItr new return
}
implement{ K <> V <> K V MapEntry Iterator  K V HashMapItr for
  ^> proc( K V HashMapItr => K V MapEntry Iterator  K V MapEntry optional ){
    K V HashMapItr itr =:
    itr .index index mut =::
    itr .next  next  mut =::
    while{ next ! do
      index 1 + index =
      index itr .map .data .length >= if{
        itr .map index next K V HashMapItr new  K V MapEntry empty return
      }
      itr .map .data index []  next =
    }
    next .value K V HashMapEntry mut res =:
    res .next next =
    itr .map index next K V HashMapItr new res .key res .value K V MapEntry new wrap return
  }
}

## addLater? HashMap.listEntries
## addLater? HashMap.toString


#end ## hashMap