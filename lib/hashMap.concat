lib/hashMap :

hashMap #namespace

stack #include
codeblocks #include
core #import

listHash public proc( A <?> A list => uint ){
  A list value =:
  0 uint hash =:
  0 uint i =:
  while{ i value .length < do
    hash 31 * value i [] hashCode + hash =
    i 1 + i =
  }
  hash return
}
hashCode public proc( var => uint ){
  var value =:
  value .type type valType =:
  ## addLater? use list-hash for tuple/enum-types
  valType .isList if{
    value listHash return
  else valType ( ) <= if
    0 uint hash =:
    0 uint i =:
    while{ i value ( ) cast .length < do
      hash 31 * value ( ) cast i [] hashCode + hash =
      i 1 + i =
    }
    hash
  else
    value refId
  }
}

MapEntry public tuple{ K <> V <> K V }
MapEntry.key   public proc( K <?> V <?> K V MapEntry => K ){ .0 }
MapEntry.value public proc( K <?> V <?> K V MapEntry => V ){ .1 }

HashMapEntry tuple{ K <> V <> K V K V MapEntry optional } ## use MapEntry instead of HashMapEntry because self-containing tuples are not supported
HashMapEntry.val=  proc( K <?> V <?> V  K V HashMapEntry =>                     ){ .1 = }
HashMapEntry.next  proc( K <?> V <?> K V HashMapEntry => K V MapEntry optional  ){ .2   }
HashMapEntry.next= proc( K <?> V <?> K V MapEntry optional  K V HashMapEntry => ){ .2 = }

HashMap public tuple{ K <> V <> K V HashMapEntry optional list int }
HashMap.data    proc( K <?> V <?> K V HashMap => K V HashMapEntry optional list ){ .0 }
HashMap.size public proc( K <?> V <?> K V HashMap => int                      ){ .1 }
HashMap.incSize proc( K <?> V <?> K V HashMap => ){ dup .1 1 + swap .1 = }
HashMap.decSize proc( K <?> V <?> K V HashMap => ){ dup .1 1 - swap .1 = }

newHashMap public proc( #+keyType+# K <> #+valType+# V <> #+cap+# int => K V HashMap ){
  int cap =:
  cap K V HashMapEntry optional list new K V HashMapEntry optional list data =:
  data 0 cap K V HashMapEntry empty fill
  data 0 K V HashMap new
}

HashMap.put public proc( K <?> V <?> #+map+# K V HashMap #+key+# K #+value+# V => #+prevVal+# V optional ){
  V value =:
  K key =:
  K V HashMap map =:
  key hashCode uint hash =:
  hash map HashMap.data .length % uint i =:
  map HashMap.data i [] if{
    K V HashMapEntry entry =:
    while{ entry HashMapEntry.next do
      entry MapEntry.key key == if{ drop ##drop next
        ##replace does not change size
        entry MapEntry.value
        value entry HashMapEntry.val=
        wrap return
      }
      entry =
    } ##drop last entry
    entry MapEntry.key key == if{
      ##replace does not change size
      entry MapEntry.value
      value entry HashMapEntry.val=
      wrap return
    else
      key value K V HashMapEntry empty K V HashMapEntry new wrap  entry HashMapEntry.next=
      map HashMap.incSize
      V empty return
    }
  else
    key value K V HashMapEntry empty K V HashMapEntry new wrap   map HashMap.data i []=
    map HashMap.incSize
    V empty return
  }
}

HashMap.contains public proc( K <?> V <?> #+map+# K V HashMap #+key+# K => bool ){
  K key =:
  K V HashMap map =:
  key hashCode uint hash =:
  hash map HashMap.data .length % uint i =:
  map HashMap.data i [] K V HashMapEntry optional entry =:
  while{ entry do
    K V HashMapEntry unwrapped =:
    unwrapped MapEntry.key key == if{
      true return
    }
    unwrapped HashMapEntry.next entry =
  }
  false return
}

HashMap.get public proc( K <?> V <?> #+map+# K V HashMap #+key+# K => #+value+# V optional ){
  K key =:
  K V HashMap map =:
  key hashCode uint hash =:
  hash map HashMap.data .length % uint i =:
  map HashMap.data i [] K V HashMapEntry optional entry =:
  while{ entry do
    K V HashMapEntry unwrapped =:
    unwrapped MapEntry.key key == if{
      unwrapped MapEntry.value wrap return
    }
    unwrapped HashMapEntry.next entry =
  }
  V empty return
}

HashMap.remove public proc( K <?> V <?> #+map+# K V HashMap #+key+# K => #+prevVal+# V optional ){
  K key =:
  K V HashMap map =:
  key hashCode uint hash =:
  hash map HashMap.data .length % uint i =:
  map HashMap.data i [] if{
    K V HashMapEntry entry =:
    entry MapEntry.key key == if{
      map HashMap.decSize
      entry MapEntry.value ## get previous value
      entry HashMapEntry.next K V HashMapEntry optional cast  map HashMap.data i []= ## remove entry
      wrap return
    else
      while{ entry HashMapEntry.next do
        K V HashMapEntry next =:
        next MapEntry.key key == if{
          map HashMap.decSize
          next MapEntry.value ## get previous value
          next HashMapEntry.next  entry HashMapEntry.next= ## remove entry
          wrap return
        }
        next entry =
      }
      V empty return
    }
  else
    V empty return
  }
}

HashMapItr public tuple{ K <> V <> K V HashMap #+index+# int #+next+# K V HashMapEntry optional }
HashMapItr.map   proc( K <?> V <?> K V HashMapItr  => K V HashMap         ){ .0   }
HashMapItr.i     proc( K <?> V <?> K V HashMapItr  => int                 ){ .1   }
HashMapItr.next  proc( K <?> V <?> K V HashMapItr  => K V HashMapEntry optional ){ .2   }
HashMapItr.next= proc( K <?> V <?> K V HashMapEntry optional  K V HashMapItr => ){ .2 = }
HashMapItr.incI  proc( K <?> V <?> K V HashMapItr => ){      dup .1 1 + swap .1 = }

^_ public proc( K <?> V <?> K V HashMap => K V HashMapItr ){
  #+map+# -1 K V HashMapEntry empty K V HashMapItr new return
}
^> public proc( K <?> V <?> K V HashMapItr => K V HashMapItr K V MapEntry optional ){
  K V HashMapItr itr =:
  while{ itr HashMapItr.next ! do
    itr HashMapItr.incI
    itr HashMapItr.i itr HashMapItr.map HashMap.data .length >= if{
      itr K V MapEntry empty return
    }
    itr HashMapItr.map HashMap.data itr HashMapItr.i []  itr HashMapItr.next=
  }
  itr HashMapItr.next K V MapEntry optional res =:
  itr HashMapItr.next if{
    HashMapEntry.next itr HashMapItr.next=
  else unreachable }
  itr res return
}

## addLater? HashMap.listEntries
## addLater? HashMap.toString
## addLater? (automatically) duplicate capacity

#end ## hashMap