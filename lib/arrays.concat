lib/arrays :

core #namespace
stack #include
codeblocks #include

## uses '<' operator for comparing elements
binarySearch public proc( A <?> A array mut? A => int ){
  A val =:
  A array mut? data =:
  0            uint l mut =:
  data .length uint r mut =:
  l r + 2 / c mut =::
  while{
    val data c [] < if{
      c r =
    else val data c [] == if
      c int cast return
    else
      c l =
    }
    l r + 2 / c =
  r l - 1 > do }
  -1 return
}
binarySearch2 public proc( A <?> A array mut? ( A A => int ) A => int ){
  A val =:
  ( A A => int ) cmp =:
  A array mut? data =:
  0            uint l mut =:
  data .length uint r mut =:
  l r + 2 / c mut =::
  while{
    val data c [] cmp () cp =::
    cp 0 < if{
      c r =
    else cp 0 == if
      c int cast return
    else
      c l =
    }
    l r + 2 / c =
  r l - 1 > do }
  -1 return
}

reverse public proc( A <?> A array mut  => ){
  toReverse =::
  0 i mut =::
  toReverse .length 1 - int maxId =:
  while{ i toReverse .length 2 / < do
    toReverse i [] A tmp =:
    toReverse maxId i - []  toReverse i []=
    tmp  toReverse maxId i - []=
    i 1 + i =
  }
}

mergesort_helper proc( A <?> A array mut #+off+# int #+to+# int #+buffer+# A memory mut => ){
  buffer =::
  uint to =:
  uint off mut =:
  input =::
  off to < if{
    off to + 2 / uint c mut =:
    input off c buffer mergesort_helper
    c 1 + c =
    input c  to buffer mergesort_helper
    ## 0 ... c-1 and c...to-1 are sorted
    c uint i mut =:
    while{ off c < &&{ c to <= } do
      while{ off c < &&{ input off [] input c [] <= } do
        off 1 + off =
      }
      off c < if{
        while{ i to <= &&{ input off [] input i [] <= ! } do
          i 1 + i =
        }
        i c - int delta =:
        delta c off - <= if{
          input c buffer 0 delta copy ## store data in buffer
          input off input off delta + c off - copy ## move remaining part of left half to the right
          buffer 0 input off delta copy ## get the elements from buffer
        else
          input off buffer 0 c off - copy ## store data in buffer
          input c input off i c - copy ## move remaining part of left half to the right
          buffer 0 input off c off - copy ## get the elements from buffer
        }
        i c =
        off 1 + off =
      }
    }
  }
}

#+ sorts the given list
  elements are compared using 'core .<='
  the sorted array overwrites the given list
 +#
mergesort public proc( A <?> A array mut => ){
  input =::
  #+list+# input #+off+#0 #+to+# input .length 1 - #+buffer+# input .length 2 / A memory mut new mergesort_helper
}

mergesort2_helper proc( A <?> A array mut #+cmp+# ( A A => int ) #+off+# int #+to+# int #+buffer+# A memory mut => ){
  buffer =::
  uint to =:
  uint off mut =:
  ( A A => int ) cmp =:
  input =::
  off to < if{
    off to + 2 / uint c mut =:
    input cmp off c buffer mergesort2_helper
    c 1 + c =
    input cmp c  to buffer mergesort2_helper
    ## 0 ... c-1 and c...to-1 are sorted
    c uint i mut =:
    while{ off c < &&{ c to <= } do
      while{ off c < &&{ input off [] input c [] cmp () 0 <= } do
        off 1 + off =
      }
      off c < if{
        while{ i to <= &&{ input off [] input i [] cmp () 0 > } do
          i 1 + i =
        }
        i c - int delta =:
        delta c off - <= if{
          input c buffer 0 delta copy ## store data in buffer
          input off input off delta + c off - copy ## move remaining part of left half to the right
          buffer 0 input off delta copy ## get the elements from buffer
        else
          input off buffer 0 c off - copy ## store data in buffer
          input c input off i c - copy ## move remaining part of left half to the right
          buffer 0 input off c off - copy ## get the elements from buffer
        }
        i c =
        off 1 + off =
      }
    }
  }
}

#+ sorts the given list
  elements are compared using the given comparison function
  the sorted array overwrites the given list
 +#
mergesort2 public proc( A <?> A array mut ( A A => int ) => ){
  ( A A => int ) cmp =:
  input =::
  #+list+# input #+cmp+# cmp #+off+# 0 #+to+# input .length 1 - #+buffer+# input .length 2 / A memory mut new
  mergesort2_helper
}

map public proc( A <?> B <?> A array mut? ( A => B ) => B array mut ){
  f =::
  l =::
  l .length B memory mut new res =::
  0 i mut =::
  while{ i l .length < do
    res l i [] f () []^=
    i 1 + i =
  }
  res return
}
filter public proc( A <?> A array mut? ( A => bool ) => A array mut ){
  f =::
  l =::
  l .length A memory mut new res =::
  0 i mut =::
  while{ i l .length < do
    l i [] f () if{
      res l i [] []^=
    }
    i 1 + i =
  }
  res return
}

#end ## core