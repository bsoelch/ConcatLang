lib/arraySlice:

core #namespace
codeblocks #include

arraySlice public struct{ A <>
  A array mut^ :parent
  uint         :offset
  uint         :length
}

[:] public proc( A <?> A array mut uint uint => A arraySlice mut ){
   to =::
   off =::
   to off >= "to>=off" assert
   #+array+# off to off - A arraySlice mut new return
}
[:] public proc( A <?> A array mut? uint uint => A arraySlice mut? ){
   to =::
   off =::
   to off >= "to>=off" assert
   #+array+# off to off - A arraySlice mut? new return
}
[:] public proc( A <?> A array uint uint => A arraySlice ){
   to =::
   off =::
   to off >= "to>=off" assert
   #+array+# off to off - A arraySlice new return
}


[] public proc( A <?> A arraySlice mut uint => A ref mut ){
      index =::
      slice =::
      index 0 >= &&{ index slice .length < } "index in range" assert
      slice .parent slice .offset index + [] return
}
[] public proc( A <?> A arraySlice mut? uint => A ){
      index =::
      slice =::
      index 0 >= &&{ index slice .length < } "index in range" assert
      slice .parent slice .offset index + [] return
}

#end ## core