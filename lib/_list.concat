lib/list: ##TODO change filename to list.concat once native list is removed

core #namespace
## TODO better way of reallocating:
##   try moving offset to avoid reallocating
##   set growth rate to factor less than 2 ( 9/8 ? )

List public struct{ A <> ##TODO? rename to 'list' once native list is removed
  A memory mut^ :data mut
}

newList public proc( A <> uint => A List mut ){
  A memory mut new A List mut new return
}

## addLater clear

ensureCap public proc( A <?> A List mut uint => ){##addLater better names for capacity procedure, add procedure for offset
  newCap =::
  mList =::
  mList .data .capacity newCap < if{
    mList .data newCap realloc
  }
}

fill public proc( A <?> A A List mut int uint => ){
  count =::
  off =::
  ##addLater checkCapacity
  .data off count fill
}

[] public proc( A <?> A List mut? uint => A ){
  i =::
  mList =::
  mList .data i [] return
}
[]= public proc( A <?> A A List mut uint => ){
  i =::
  mList =::
  #+val+# mList .data i []=
}
<< public proc( A <?> A List mut A => A List mut ){
  val =::
  mList =::
  mList .data listData =::
  listData .length listData .capacity >= if{
    listData .offset listData .capacity + delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  listData val []^=
  mList return
}
>> public proc( A <?> A A List mut => A List mut ){
  mList =::
  mList .data listData =::
  val =::
  listData .offset 0 == if{
    listData .offset listData .capacity + delta =::
    listData listData .offset listData .capacity + delta + realloc
    listData delta setOffset
  }
  val listData ^[]=
  mList return
}
<<* public proc( A <?> A List mut A List mut? => A List mut ){
  toAppend =::
  mList =::
  mList toAppend .data <<*
}
<<* public proc( A <?> A List mut A array mut? => A List mut ){
  toAppend =::
  mList =::
  mList .data listData =::
  listData .length toAppend .length + listData .capacity > if{
    toAppend .length delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toAppend listData listData .length copy
  mList return
}
*>> public proc( A <?> A List mut? A List mut => A List mut ){
  mList =::
  toAppend =::
  toAppend .data mList *>>
}
*>> public proc( A <?> A array mut? A List mut => A List mut ){
  mList =::
  mList .data listData =::
  toAppend =::
  listData .offset toAppend .length < if{
    toAppend .length delta =::
    listData listData .offset listData .capacity + delta + realloc
    listData listData .offset delta + setOffset
  }
  toAppend listData toAppend .length int cast -_ copy
  mList return
}

## addLater [:] [:]=

#end ## core