lib/list:

core #namespace
stack #include
codeblocks #include
arraySlice #include
arrayBuilder #include
io #include
numbers #include

## TODO better way of reallocating:
##   try moving offset to avoid reallocating
##   set growth rate to factor less than 2 ( 9/8 ? )

List public struct{ A <>
  A memory mut^ :data private mut
}
ListSlice public struct{ A <>
  A List mut^ :parent restricted
  uint        :offset restricted
  uint        :length restricted mut
}

newList public proc( A <> uint => A List mut ){
  A memory mut new A List mut new return
}
## wrappers for easier string handling
buildString public proc( uint => byte List mut ){
  byte newList return
}
buildString public proc( string mut? => byte List mut ){
  str =::
  str .length byte newList str <<* return
}
buildUString public proc( uint => codepoint List mut ){
  codepoint newList return
}

length  public proc( A <?> A List mut? => uint ){
  #+list+# .data .length    return
}
offset  public proc( A <?> A List mut? => uint ){
  #+list+# .data .offset    return
}
capacity public proc( A <?> A List mut? => uint ){ ##addLater better names for capacity procedure, add procedure for modifying offset
  #+list+# .data .capacity  return
}

clear public proc( A <?> A List mut => ){
  mList =::
  mList .data 0 mList .data .length clearSlice
}
clear public proc( A <?> A ListSlice ref => ){
  slice =::
  slice .parent .data slice .offset slice .offset slice .length + clearSlice
  0 slice .length =
}

clearSlice public proc( A <?> A List mut uint uint => ){
  to =::
  off =::
  #+list+# .data off to clearSlice
}
clearSlice public proc( A <?> A ListSlice ref uint uint => ){
  to =::
  off =::
  slice =::
  off 0 < ||{ to off < ||{ to slice .length > } } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* to <<u " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  slice .parent .data slice .offset off + slice .offset to + clearSlice
  slice .length to off - - slice .length =
}

fill public proc( A <?> A A List mut int uint => ){
  count =::
  off =::
  ## cast to array to natively check bounds
  .data A array mut cast off count fill
}
fill public proc( A <?> A A ListSlice ref int uint => ){
  count =::
  off =::
  slice =::
  off 0 < ||{ off count + slice .length > } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* count <<u " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  #+val+# slice .parent slice .offset off + count fill
}

[] public proc( A <?> A List mut? uint => A ){
  i =::
  mList =::
  mList .data i [] return
}
[] public proc( A <?> A ListSlice mut? uint => A ){
  i =::
  slice =::
  i 0 < ||{ i slice .length >= } if{
    64 buildString
    "index out of bounds " <<* i <<i " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  slice .parent i slice .offset + [] return
}

[]= public proc( A <?> A A List mut uint => ){
  i =::
  mList =::
  #+val+# mList .data i [] =
}
[]= public proc( A <?> A A ListSlice ref uint => ){
  i =::
  slice =::
  i 0 < ||{ i slice .length >= } if{
    64 buildString
    "index out of bounds " <<* i <<i " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  #+val+# slice .parent .data slice .offset i + [] =
}

##inserts element after the given index
insert public proc( A <?> A A List mut uint => ){
  index =::
  mList =::
  mList .data listData =::
  index 0 < ||{ index listData .length > } if{
    64 buildString
    "index out of bounds " <<* index <<i " length:" <<* listData .length <<u '\n' << .build eputs
    1 exit
  }
  listData .length listData .capacity >= if{
    listData .offset listData .capacity + 8 + delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  index listData .length < if{
    listData index listData index 1 + listData .length index - copy
    #+val+# listData index [] =
  else
    #+val+# listData swap []^=
  }
}
insert public proc( A <?> A A ListSlice ref uint => ){
  index =::
  slice =::
  index 0 < ||{ index slice .length > } if{
    64 buildString
    "index out of bounds " <<* index <<i " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  #+val+# slice .parent slice .offset index + insert
  slice .length 1 + slice .length =
}
insertAll public proc( A <?> A List mut? A List mut uint => ){
  index =::
  mList =::
  #+toInsert+# .data mList index insertAll
}
insertAll public proc( A <?> A array mut? A List mut uint => ){
  index =::
  mList =::
  mList .data listData =::
  toInsert =::
  index 0 < ||{ index listData .length > } if{
    64 buildString
    "index out of bounds " <<* index <<i " length:" <<* listData .length <<u '\n' << .build eputs
    1 exit
  }
  listData .length toInsert .length + listData .capacity > if{
    toInsert .length delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toInsert 0 listData index index toInsert .length copyToSlice
}
insertAll public proc( A <?> A ListSlice mut? A List mut uint => ){
  index =::
  mList =::
  mList .data listData =::
  toInsert =::
  index 0 < ||{ index listData .length > } if{
    64 buildString
    "index out of bounds " <<* index <<i " length:" <<* listData .length <<u '\n' << .build eputs
    1 exit
  }
  listData .length toInsert .length + listData .capacity > if{
    toInsert .length delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toInsert .parent .data toInsert .offset listData index index toInsert .length copyToSlice
}
insertAll public proc( A <?> A List mut? A ListSlice ref uint => ){
  index =::
  slice =::
  #+toInsert+# .data slice index insertAll
}
insertAll public proc( A <?> A array mut? A ListSlice ref uint => ){
  index =::
  slice =::
  toInsert =::
  index 0 < ||{ index slice .length > } if{
    64 buildString
    "index out of bounds " <<* index <<i " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  slice .length toInsert .length + ##newLength
  toInsert slice .parent slice .offset index + insertAll
  #+newLength+# slice .length =
}
insertAll public proc( A <?> A ListSlice mut? A ListSlice ref uint => ){
  index =::
  slice =::
  toInsert =::
  index 0 < ||{ index slice .length > } if{
    64 buildString
    "index out of bounds " <<* index <<i " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  slice .length toInsert .length + ##newLength
  toInsert slice .parent slice .offset index + insertAll
  #+newLength+# slice .length =
}

remove public proc( A <?> A List mut uint => A ){
  index =::
  #+mList+# .data listData =::
  listData index [] .. ## prev
  listData index index 1 + clearSlice
  #+prev+# return
}
remove public proc( A <?> A ListSlice ref uint => A ){
  index mut =::
  slice =::
  index 0 < ||{ index slice .length >= } if{
    64 buildString
    "index out of bounds " <<* index <<i " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  index slice .offset + index =
  slice .parent .data index [] .. ## prev
  slice .parent .data index index 1 + clearSlice
  slice .length 1 - slice .length =
  #+prev+# return
}

getFirst public proc( A <?> A List mut? => A ){
   #+mList+# 0 [] return
}
getFirst public proc( A <?> A ListSlice mut? => A ){
   #+slice+# 0 [] return
}
getLast public proc( A <?> A List mut? => A ){
   mList =::
   mList mList .data .length 1 - [] return
}
getLast public proc( A <?> A ListSlice mut? => A ){
   slice =::
   slice slice .length 1 - [] return
}

peekFirst public proc( A <?> A List mut? => A optional ){
   mList =::
   mList .data .length 0 == if{
     A empty return
   }
   mList 0 [] wrap return
}
peekFirst public proc( A <?> A ListSlice mut? => A optional ){
   slice =::
   slice .length 0 == if{
     A empty return
   }
   slice 0 [] wrap return
}
peekLast public proc( A <?> A List mut? => A optional ){
   mList =::
   mList .data .length 0 == if{
     A empty return
   }
   mList mList .data .length 1 - [] wrap return
}
peekLast public proc( A <?> A ListSlice mut? => A optional ){
   slice =::
   slice .length 0 == if{
     A empty return
   }
   slice slice .length 1 - [] wrap return
}

removeFirst public proc( A <?> A List mut => A ){
   #+mList+# 0 remove return
}
removeFirst public proc( A <?> A ListSlice ref => A ){
   #+slice+# 0 remove return
}
removeLast public proc( A <?> A List mut => A ){
   mList =::
   mList mList .data .length 1 - remove return
}
removeLast public proc( A <?> A ListSlice ref => A ){
   slice =::
   slice slice .length 1 - remove return
}

popFirst public proc( A <?> A List mut => A optional ){
   mList =::
   mList .data .length 0 == if{
     A empty return
   }
   mList 0 remove wrap return
}
popFirst public proc( A <?> A ListSlice ref => A optional ){
   slice =::
   slice .length 0 == if{
     A empty return
   }
   slice 0 remove wrap return
}
popLast public proc( A <?> A List mut => A optional ){
   mList =::
   mList .data .length 0 == if{
     A empty return
   }
   mList mList .data .length 1 - remove wrap return
}
popLast public proc( A <?> A ListSlice ref => A optional ){
   slice =::
   slice .length 0 == if{
     A empty return
   }
   slice slice .length 1 - remove wrap return
}

<< public proc( A <?> A List mut A => A List mut ){
  val =::
  mList =::
  mList .data listData =::
  listData .length listData .capacity >= if{
    listData .offset listData .capacity + 8 + delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  listData val []^=
  mList return
}
<< public proc( A <?> A ListSlice ref A => A ListSlice ref ){
  val =::
  slice =::
  val slice .parent slice .offset slice .length + insert
  slice .length 1 + slice .length =
  slice return
}
>> public proc( A <?> A A List mut => A List mut ){
  mList =::
  mList .data listData =::
  val =::
  listData .offset 0 == if{
    listData .offset listData .capacity + 8 + delta =::
    listData listData .offset listData .capacity + delta + realloc
    listData delta setOffset
  }
  val listData ^[]=
  mList return
}
>> public proc( A <?> A A ListSlice ref => A ListSlice ref ){
  slice =::
  val =::
  val slice .parent slice .offset insert
  slice .length 1 + slice .length =
  slice return
}
<<* public proc( A <?> A List mut A List mut? => A List mut ){
  toAppend =::
  mList =::
  mList toAppend .data <<*
}
<<* public proc( A <?> A List mut A array mut? => A List mut ){
  toAppend =::
  mList =::
  mList .data listData =::
  listData .length toAppend .length + listData .capacity > if{
    toAppend .length delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toAppend 0 listData listData .length toAppend .length copy
  mList return
}
<<* public proc( A <?> A List mut A ListSlice mut? => A List mut ){
  toAppend =::
  mList =::
  mList .data listData =::
  listData .length toAppend .length + listData .capacity > if{
    toAppend .length delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toAppend .parent .data toAppend .offset listData listData .length toAppend .length copy
  mList return
}
<<* public proc( A <?> A List mut A arraySlice mut? => A List mut ){
  toAppend =::
  mList =::
  mList .data listData =::
  listData .length toAppend .length + listData .capacity > if{
    toAppend .length delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toAppend .parent toAppend .offset listData listData .length toAppend .length copy
  mList return
}
<<* public proc( A <?> A ListSlice ref A List mut? => A ListSlice ref ){
  toAppend =::
  slice =::
  slice .length toAppend .data .length + ## newLength
  toAppend .data slice .parent slice .offset insertAll
  #+newLength+# slice .length =
  slice return
}
<<* public proc( A <?> A ListSlice ref A array mut? => A ListSlice ref ){
  toAppend =::
  slice =::
  slice .length toAppend .length + ## newLength
  toAppend slice .parent slice .offset insertAll
  #+newLength+# slice .length =
  slice return
}
<<* public proc( A <?> A ListSlice ref A ListSlice mut? => A ListSlice ref ){
  toAppend =::
  slice =::
  slice .length toAppend .length + ## newLength
  toAppend slice .parent slice .offset insertAll
  #+newLength+# slice .length =
  slice return
}
*>> public proc( A <?> A List mut? A List mut => A List mut ){
  mList =::
  toAppend =::
  toAppend .data mList *>>
}
*>> public proc( A <?> A array mut? A List mut => A List mut ){
  mList =::
  mList .data listData =::
  toAppend =::
  listData .offset toAppend .length < if{
    toAppend .length delta =::
    listData listData .offset listData .capacity + delta + realloc
    listData listData .offset delta + setOffset
  }
  toAppend 0 listData toAppend .length int cast -_ toAppend .length copy
  mList return
}
*>> public proc( A <?> A ListSlice mut? A List mut => A List mut ){
  mList =::
  mList .data listData =::
  toAppend =::
  listData .offset toAppend .length < if{
    toAppend .length delta =::
    listData listData .offset listData .capacity + delta + realloc
    listData listData .offset delta + setOffset
  }
  toAppend .parent .data toAppend .offset listData toAppend .length int cast -_ toAppend .length copy
  mList return
}
*>> public proc( A <?> A List mut? A ListSlice ref => A ListSlice ref ){
  slice =::
  toAppend =::
  slice .length toAppend .data .length + ## newLength
  toAppend .data slice .parent slice .offset slice .length + insertAll
  #+newLength+# slice .length =
  slice return
}
*>> public proc( A <?> A array mut? A ListSlice ref => A ListSlice ref ){
  slice =::
  toAppend =::
  slice .length toAppend .length + ## newLength
  toAppend slice .parent slice .offset slice .length + insertAll
  #+newLength+# slice .length =
  slice return
}
*>> public proc( A <?> A ListSlice mut? A ListSlice ref => A ListSlice ref ){
  slice =::
  toAppend =::
  slice .length toAppend .length + ## newLength
  toAppend slice .parent slice .offset slice .length + insertAll
  #+newLength+# slice .length =
  slice return
}

[:] public proc( A <?> A List mut uint uint => A ListSlice ref ){
  to =::
  off =::
  mList =::
  off 0 < ||{ to off < ||{ to mList .data .length > } } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* to <<u " length:" <<* mList .data .length <<u '\n' << .build eputs
    1 exit
  }
  mList off to off - A ListSlice ref new return
}
[:] public proc( A <?> A ListSlice ref uint uint => A ListSlice ref ){
  to =::
  off =::
  slice =::
  off 0 < ||{ to off < ||{ to slice .length > } } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* to <<u " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  slice .parent slice .offset off + slice .offset to + [:] return
}
## addLater [:] for non-mutable List/ListSlice

[:]= public proc( A <?> A array mut? A List mut uint uint => ){
  to =::
  off =::
  mList =::
  mList .data listData =::
  toInsert =::
  off 0 < ||{ to off < ||{ to listData .length > } } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* to <<u " length:" <<* listData .length <<u '\n' << .build eputs
    1 exit
  }
  listData .length toInsert .length to off - - + listData .capacity > if{
    toInsert .length to off - - delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toInsert 0 listData off to toInsert .length copyToSlice return
}
[:]= public proc( A <?> A List mut? A List mut uint uint => ){
  to =::
  off =::
  mList =::
  #+toInsert+# .data mList off to [:]=
}
[:]= public proc( A <?> A ListSlice mut? A List mut uint uint => ){
  to =::
  off =::
  mList =::
  mList .data listData =::
  toInsert =::
  off 0 < ||{ to off < ||{ to listData .length > } } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* to <<u " length:" <<* listData .length <<u '\n' << .build eputs
    1 exit
  }
  listData .length toInsert .length to off - - + listData .capacity > if{
    toInsert .length to off - - delta =::
    listData listData .offset listData .capacity + delta + realloc
  }
  toInsert .parent .data toInsert .offset listData off to toInsert .length copyToSlice return
}
[:]= public proc( A <?> A array mut? A ListSlice ref uint uint => ){
  to =::
  off =::
  slice =::
  toInsert =::
  off 0 < ||{ to off < ||{ to slice .length > } } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* to <<u " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  slice .length toInsert .length to off - - + ## newLength
  toInsert slice .parent slice .offset off + slice .offset to + [:]=
  #+newLength+# slice .length =
}
[:]= public proc( A <?> A List mut? A ListSlice ref uint uint => ){
  to =::
  off =::
  slice =::
  toInsert =::
  slice .length toInsert .data .length to off - - + ## newLength
  toInsert .data slice off to [:]=
  #+newLength+# slice .length =
}
[:]= public proc( A <?> A ListSlice mut? A ListSlice ref uint uint => ){
  to =::
  off =::
  slice =::
  toInsert =::
  off 0 < ||{ to off < ||{ to slice .length > } } if{
    64 buildString
    "invalid slice " <<* off <<i ":" <<* to <<u " length:" <<* slice .length <<u '\n' << .build eputs
    1 exit
  }
  slice .length toInsert .length to off - - + ## newLength
  toInsert slice .parent slice .offset off + slice .offset to + [:]=
  #+newLength+# slice .length =
}


implement{ A <> A ArrayBuilder A List for
  length proc( A List mut? => uint ){
    #+list+# .data .length    return
  }
  append proc( A A List mut => A ArrayBuilder mut ){
    swap <<  return
  }
  appendAll proc( A array mut? A List mut => A ArrayBuilder mut ){
    swap <<* return
  }
  prepend proc( A A List mut => A ArrayBuilder mut ){
    >>   return
  }
  prependAll proc( A array mut? A List mut => A ArrayBuilder mut ){
    *>>  return
  }
  build proc( A List mut? => A array mut~ ){
    #+list+# .data clone-mut~ return
  }
  ensureCap proc( uint A List mut => ){
    mList =::
    newCap =::
    mList .data .capacity newCap < if{
      mList .data newCap realloc
    }
  }
  clear proc( A List mut => ){ clear }
}
implement{ A <> A ArrayBuilder A ListSlice ref for
  length proc( A ListSlice mut? => uint ){
    #+slice+# .length    return
  }
  append proc( A A ListSlice ref => A ArrayBuilder mut ){
    swap <<  return
  }
  appendAll proc( A array mut? A ListSlice ref => A ArrayBuilder mut ){
    swap <<* return
  }
  prepend proc( A A ListSlice ref => A ArrayBuilder mut ){
    >>  return
  }
  prependAll proc( A array mut? A ListSlice ref => A ArrayBuilder mut ){
    *>> return
  }
  build proc( A ListSlice ref => A array ){
    slice =::
    slice .length A memory mut new tmp =::
    slice .parent .data slice .offset tmp 0 slice .length copy
    tmp clone-mut~ return
  }
  ensureCap proc( uint A ListSlice ref => ){
    slice =::
    newCap =::
    slice .parent .data .capacity slice .parent .data .length slice .length - - newCap < if{
      slice .parent .data  slice .parent .data .length slice .length - newCap + realloc
    }
  }
  clear proc( A ListSlice ref => ){ clear }
}

#end ## core