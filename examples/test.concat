proc
  dup float $a float :x
  while x x * a - 1E-16 > :
   a x / x + 2 / !x
  end
  x
end *->* $sqrt

proc
 if dup 1 > :
  dup 1 - fib () swap 2 - fib () +
 elif 1 == :
  1
 else
  0
 end
end *->* $fib

2.0 sqrt () println
3 sqrt () println

0 while dup 5 < :
 dup fib () println
 1 +
end drop

proc 0 != end *->* $intToBool

3 intToBool () println
0 intToBool () println

2 3 proc + 2.0 / end () println

"Hello" ' ' "World" >>: ++ println

"Hello World!" 7 9 [:] println

0x42 "0x%04x" sprintf 3.41592653589793238 -20 0 16 "%s %*.*(*)f\n" printf

proc #_ list ? -> list ? _#
 dup typeof unwrap type :arg.type
 dup length        int  :arg.length
 ..^ while <^ : swap end drop
 arg.type arg.length {}
end *->* $reverse
"Hello World" reverse () println
