proc
  dup float a =$ float x =:
  while x x * a - 1E-16 > :
   a x / x + 2 / x =
  end
  x
end *->* sqrt =$

proc
 if dup 1 > :
  dup 1 - fib () swap 2 - fib () +
 elif 1 == :
  1
 else
  0
 end
end *->* fib =$

2.0 sqrt () println
3 sqrt () println

0 while dup 5 < :
 dup fib () println
 1 +
end drop

proc 0 != end *->* intToBool =$

3 intToBool () println
0 intToBool () println

2 3 proc + 2.0 / end () println

"Hello" ' ' "World" >>: :+ println

"Hello World!" 7 9 [:] println

printf #include
0x42 "0x%04x" formatString () 3.141592653589793238 -20 0 16 "%s %*.*(*)f\n" printf

iterator #include
proc #_ list ? -> list ? _#
  ## store type and length of the list
  dup typeof content type arg.type   =:
  dup length         int  arg.length =:
  ## Iterate though the elements in reverse order
  ..^ while <^ ?? : unwrap swap end drop drop
  ## reassemble the list
  arg.type arg.length {}
end *->* reverse =$

"Hello World" reverse () println

proc #_ list ? -> ?  _#
  0 var tmp =: ## Initialize sum to 0
  ## Iterate though all elements of the list
  ^.. while ^> ?? : unwrap
    tmp swap + tmp =
  end drop drop
  tmp ## load the total sum onto the stack
end *->* sum =$

1 2 3 4 5 6 7 8 9 int 9 {} sum () println
1.5 2.5 3.5 4.5 float 4 {} sum () println

struct 1 int a =: 2 int b =$ end (struct) test =:
test a . println
test 42 a . = println

"Hello World?" dup '!' 11 [] = println
"Hello World!" dup "Programmer" 6 11 [:] = println
"Hello World!" dup "" 5 11 [:] = println

"./examples/include.concat" #include
"./examples/include.concat" #include
included child . ()
struct
included child_struct . $import
end println

255 byte cast dup typeof swap "%s: %s\n" printf
0x123456789abcdef bytes asFloat_BE bytes println

"examples/testIO.txt" "rw" open (file) file =:
10 byte list new byte list IO_Buff =:
file IO_Buff 0 64 read int n =:
if n 0 > :
  file IO_Buff 0 n write drop
  file truncate drop
  file close drop
end

"Test" dup "A" :+ clone "B" :+ println println println
"Test" string 1 {} clone! clone 0 [] "C" :+ :<< println println

numbers/string #include
-123456 false 36 true intToString () println
3.141592653589793238 0 16 false false floatToString () println
3.141592653589793238 println
"3.141592653589793238" parseFloat () println
"11001001" 2 stringToInt () println
0.0 0 16 false false floatToString () println
 1 0.0 / 0 16 false false floatToString () println
-1 0.0 / 0 16 false false floatToString () println
 0 0.0 / 0 16 false false floatToString () println

 10 int list new dup println
 1000 ensureCap println
 1 2 3 int float int 3 tuple new dup println
 clone dup  42 1 [] = println
 dup   dup 2.0 0 [] = println
 2 [] println

 "Hello" iterateStart ()
 while iteratorNext () optional_hasValue () :
   optional_getValue () println
 end drop drop ## iterator and optional

&& "A " print true  : "B " print true   end println
&& "A " print true  : "B " print false  end println
&& "A " print false : "B " print true   end println
&& "A " print false : "B " print false  end println
|| "A " print true  : "B " print true   end println
|| "A " print true  : "B " print false  end println
|| "A " print false : "B " print true   end println
|| "A " print false : "B " print false  end println

hashMap #include
1 2 3 int 3 {} dup refId println hashCode println
1 2 3 int 3 {} dup refId println hashCode println

int int 4 __HASH_newMap () var map =:
"put:" println
map 0 0 __HASH_put () println
map 1 1 __HASH_put () println
map 2 2 __HASH_put () println
map 3 3 __HASH_put () println
map 4 4 __HASH_put () println
map 5 5 __HASH_put () println
map 6 6 __HASH_put () println
map 7 7 __HASH_put () println
map 0 8 __HASH_put () println
map 3 9 __HASH_put () println
"get:" println
map 0 __HASH_get () println
map 2 __HASH_get () println
map 4 __HASH_get () println
map 8 __HASH_get () println
"remove:" println
map 1 __HASH_remove () println
map 3 __HASH_remove () println
map 5 __HASH_remove () println
map 9 __HASH_remove () println
"map:" println
map println