tests/lib/strings :

strings #include
core #import

{ 1 2 3 } { 1 3 2 } lexCmp 0 < debugPrint
"Hello" "World" < debugPrint
"Hello" "World" >= debugPrint
"Hello" "World" <= debugPrint
"Hello" "World" > debugPrint
"Hello" "World" == debugPrint
"Hello" "World" != debugPrint

u"Hello" u"World" < debugPrint
u"Hello" u"World" >= debugPrint
u"Hello" u"World" <= debugPrint
u"Hello" u"World" > debugPrint
u"Hello" u"World" == debugPrint
u"Hello" u"World" != debugPrint

"__________________________" debugPrint
"starts/endsWith:\n" debugPrint

"Hello" "World" startsWith debugPrint
"Hello" "Hell" startsWith debugPrint
"Hello" "" startsWith debugPrint
"" "" startsWith debugPrint
"" "A" startsWith debugPrint
"Hello World" "World" endsWith debugPrint
"" "World" endsWith debugPrint
"Hello World" "" endsWith debugPrint
"" "" endsWith debugPrint

"__________________________" debugPrint
"indexOf:\n" debugPrint

"" "" indexOf debugPrint
"" "Hello" indexOf debugPrint
"Hello" "" indexOf debugPrint
"Hello World" "or" indexOf debugPrint
"Hello World" "hello" indexOf debugPrint
"Hello World" "o" indexOf debugPrint
"__________________________" debugPrint
"listIndexOf:\n" debugPrint

"Hello" "" lastIndexOf debugPrint
"" "" lastIndexOf debugPrint
"" "World" lastIndexOf debugPrint
"Hello World" "o" lastIndexOf debugPrint

"__________________________" debugPrint
"isSublist:\n" debugPrint

"Hello World" "or" isSublist debugPrint
"Hello" "World" isSublist debugPrint
{ "List" "of" "Strings" } { "Strings" } isSublist debugPrint
##addLater remove casts once immutable lists are implemented
{ "List" "of" "Strings" } var list cast "Strings" var list cast isSublist debugPrint
