tests/lib/lists :

core #namespace
arrays #include
stack #include

{ 1 2 3 4 } clone l =:: ##addLater add possibility to directly create mutable arrays
l reverse
l debugPrint

"_________________________" debugPrint
"sort:\n" debugPrint
l mergesort
l debugPrint
l mergesort
l debugPrint

"_________________________" debugPrint
"sort2:\n" debugPrint
lambda( int int ){ - -_ } cmp =::
l cmp mergesort2
l debugPrint
l cmp mergesort2
l debugPrint

lenCmp proc( string string => int ){
  string a =:
  string b =:
  a .length b .length - int cast return
}
{ "sorting" "with" "comparator" "is" "now" "supported" } clone dup @lenCmp mergesort2 debugPrint

"_________________________" debugPrint
"map:\n" debugPrint

{ 1 2 3 4 5 } lambda( int ){ dup * } map debugPrint
{ 1 2 3 4 5 } lambda( int ){ i =:: { i } } map debugPrint

"_________________________" debugPrint
"filter:\n" debugPrint


{ 1 2 3 4 5 } lambda( int => bool ){ 2 % 0 != } filter debugPrint

"_________________________" debugPrint
"search:\n" debugPrint
{ 2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 } primes =::
primes debugPrint
primes 17  binarySearch  debugPrint
primes 51  binarySearch  debugPrint
primes 1   binarySearch  debugPrint
primes 100 binarySearch  debugPrint
{ "search" "sorted" "strings" } search2 =::
strings #include
search2 debugPrint
search2 @lexCmp "sorted"    binarySearch2 debugPrint
search2 @lexCmp "searching" binarySearch2 debugPrint
search2 @lexCmp "before"    binarySearch2 debugPrint
search2 @lexCmp "where"     binarySearch2 debugPrint



#end