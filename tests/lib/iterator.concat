test/iterator :

stack #include
iterator #include
codeblocks #include
core #import

reverse proc( string => string mut ){
  string toReverse =:
  ## store type and length of the list
  toReverse .length string mut new res =::
  ## Iterate though the elements in reverse order
  toReverse _^ while{ <^ do
    byte cast res swap << res =
  } drop
  res return
}

"Hello World" reverse debugPrint

sum proc( A <?> A list => A ){
  0 A tmp mut =: ## Initialize sum to 0
  ## Iterate though all elements of the list
  ^_ for{
    tmp swap + tmp =
  } drop
  tmp ## load the total sum onto the stack
}

{ 1 2 3 4 5 6 7 8 9 } sum debugPrint
{ 1.5 2.5 3.5 4.5   } sum debugPrint

"Hello" ^_ for{
  debugPrint
} drop ## iterator and optional