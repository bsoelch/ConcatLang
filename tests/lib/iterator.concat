test/iterator :

stack #include
iterator #include
codeblocks #include
list #include
core #import

##addLater remove Iterator casts once traits can extended other traits
##         allow to access implementation type at runtime

reverse proc( string => string ){
  string toReverse =:
  ## store type and length of the list
  toReverse .length buildString res =::
  ## Iterate though the elements in reverse order
  toReverse _^  byte ReverseIterator cast while{ .<^ do
    byte cast res swap << res =
  } drop
  res .build return
}

"Hello World" reverse debugPrint

sum proc( A <?> A array => A ){
  0 A tmp mut =: ## Initialize sum to 0
  ## Iterate though all elements of the list
  ^_ A Iterator cast for{
    tmp swap + tmp =
  } drop
  tmp ## load the total sum onto the stack
}

{ 1 2 3 4 5 6 7 8 9 } sum debugPrint
{ 1.5 2.5 3.5 4.5   } sum debugPrint

"Hello" ^_ byte Iterator cast for{
  debugPrint
} drop ## iterator

{ 0 1 2 3 4 5 6 7 8 9 } ^_ lambda( int ){ 2.0 / } map lambda( float ){ 1.0 % 0 != } filter for{
  debugPrint
} drop ## iterator

{ 1 2 } ^_  { 3 4 } ^_ { 5 6 } ^_ concat concat { 7 8 } ^_ { 9 10 } ^_ concat  { 11 12 } ^_ concat concat
dup debugPrint
for{
  debugPrint
} drop ## iterator