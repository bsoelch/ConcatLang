test/procedures :

stack #include
types #include
valueIO #include
core #import

sqrt proc( float => float ){
  dup float a =:
  float x mut =:
  while{ x x * a - 1E-16 > do
   a x / x + 2 / x =
  }
  x
}

fib proc( int => int ){
      dup 1 > if{
  dup 1 - fib swap 2 - fib +
 else 1 == if
  1
 else
  0
 }
}

2.0 sqrt println
3 @sqrt () println

0 while{ dup 15 < do
 dup fib println
 1 +
} drop

lambda( int => bool ){ 0 != } intToBool =::

3 intToBool () println
0 intToBool () println

2 3 lambda( int int => float ){ + 2.0 / } () println

lambda( ){
  "currying" string a =:
  lambda( ){
    " is"    string b =:
    lambda( ){
      " now" string c =:
      lambda( ){
        " supported!" string d =:
        lambda( ){
          32 mut-string new a <<* b <<* c <<* d <<* println
        }
      }
    }
  }
} () () () () ()

curriedMinus proc( int => ( int => int ) ){
  int a =:
  lambda( int => int ){
    int b =:
    a b -
  }
}

1 curriedMinus oneMinus =::
2 3 curriedMinus () println
4 oneMinus () println
