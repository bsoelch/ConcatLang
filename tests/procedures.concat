stack #include
valueIO #include
core #import

sqrt proc float => float :
  dup float a =$ float x =:
  while x x * a - 1E-16 > do
   a x / x + 2 / x =
  end
  x
end

fib proc int => int :
    dup 1 > if
  dup 1 - fib swap 2 - fib +
 else 1 == _if
  1
 else
  0
 end
end

2.0 sqrt println
3 sqrt @() () println

0 while dup 15 < do
 dup fib println
 1 +
end drop

lambda 0 != end *->* intToBool =$

3 intToBool () println
0 intToBool () println

2 3 lambda + 2.0 / end () println

lambda
  "currying" string a =$
  lambda
    " is"    string b =$
    lambda
      " now" string c =$
      lambda
        " supported!" string d =$
        lambda
          a b :+ c :+ d :+ println
        end
      end
    end
  end
end () () () () ()

curriedMinus proc int => int 1 int 1 -> :
 int a =$
 lambda int => int :
   int b =:
   a b -
 end
end

1 curriedMinus int 1 int 1 -> oneMinus =:
2 3 curriedMinus () println
4 oneMinus () println