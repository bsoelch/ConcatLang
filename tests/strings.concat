test/strings :

stack #include
valueIO #include
core #import

 "Hello World" println
u"Hello World" println
 "ğŸ’»" 0 [] dup int cast print "(" print #+char-value+# print ")" println
u"ğŸ’»" 0 [] dup int cast print "(" print #+char-value+# print ")" println
utf8 #include
 "aÂ°ğŸ’»" .length println
 "aÂ°ğŸ’»" codepoints         dup .type print "[" print dup .length print "]:" print println
u"aÂ°ğŸ’»" .length println
u"aÂ°ğŸ’»" codepointsToString dup .type print "[" print dup .length print "]:" print println

"aÂ°" u"ğŸ’»" <<* dup .type print "[" print dup .length print "]:" print println
u"aÂ°" "ğŸ’»" *>> dup .type print "[" print dup .length print "]:" print println
"aÂ°" u"ğŸ’»" *>> dup .type print "[" print dup .length print "]:" print println
u"aÂ°" "ğŸ’»" <<* dup .type print "[" print dup .length print "]:" print println

strings #include
"_____________________________________" println
"strings.concat:\n" println

{ 1 2 3 } { 1 3 2 } lexCmp 0 < println
"Hello" "World" < println
u"Hello" u"World" >= println
"Hello" "World" startsWith println
"Hello" "Hell" startsWith println
"Hello" "" startsWith println
"" "" startsWith println
"" "A" startsWith println
"Hello World" "World" endsWith println
"" "World" endsWith println
"Hello World" "" endsWith println
"" "" endsWith println

"" "" indexOf println
"" "Hello" indexOf println
"Hello" "" indexOf println
"Hello World" "or" indexOf println
"Hello World" "hello" indexOf println
"Hello World" "o" indexOf println
"Hello" "" lastIndexOf println
"" "" lastIndexOf println
"" "World" lastIndexOf println
"Hello World" "o" lastIndexOf println

"Hello World" "or" isSublist println
"Hello" "World" isSublist println
{ "List" "of" "Strings" } { "Strings" } isSublist println
{ "List" "of" "Strings" } "Strings" isSublist println
