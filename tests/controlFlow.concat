test/controlFloat :

valueIO #include
core #import

"branches:\n" puts
true if{
  0 int test =:
  "if-end\n" puts
}
false if{
  0 int test =:
  unreachable
}
true if{
  0 int test =:
  "if(true)-else-end\n" puts
else
  0 int test =:
  unreachable
}
false if{
  0 int test =:
  unreachable
else
  0 int test =:
  "if(false)-else-end\n" puts
}
true if{
  0 int test =:
  "if(true)-elif-end\n" puts
else true if
  0 int test =:
  unreachable
}
false if{
  0 int test =:
  unreachable
else true if
  0 int test =:
  "if(false)-elif(true)-end\n" puts
}
false if{
  0 int test =:
  unreachable
else false if
  0 int test =:
  unreachable
}
true if{
  0 int test =:
  "if(true)-elif-else-end\n" puts
else false if
  0 int test =:
  unreachable
else
  0 int test =:
  unreachable
}
false if{
  0 int test =:
  unreachable
else true if
  0 int test =:
  "if(false)-elif(true)-else-end\n" puts
else
  0 int test =:
  unreachable
}
false if{
  0 int test =:
  unreachable
else false if
  0 int test =:
  unreachable
else
  0 int test =:
  "if(false)-elif(false)-else-end\n" puts
}

while{ false do
  unreachable
}
"do-while\n"
while{ dup puts false do } drop

"__________________________\n" puts
"scopes:\n" puts
   true bool a =: true if{
  false bool a =:
}
a println
                    false  if{
else 1 int a mut =: false if
else a 1 + a =      false if
else a 1 + a =      false if
else
 a println
}
5 int i mut =:
5 int j mut =:
while{ i 0 > do
  i i * int j =:
  i 1 - i =
  j println
}
j println
"global" string doWhile =:
while{ "while-scope" string doWhile =: j 0 > do
  j 1 - j =
  "do-scope" string doWhile =:
}
doWhile println
while{ "do-while-scope" string doWhile =: j 1 + dup j = 5 < do }
doWhile println
j println

