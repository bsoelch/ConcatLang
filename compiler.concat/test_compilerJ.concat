test/compiler:

stack #include
core  #import

test proc( int => byte ){ byte cast }


one proc( => int ){ 1 }
two proc( => int ){ 2 }
three proc( => int ){ 3 }
four proc( => int ){ 4 }

cmpCheck proc( int uint => int ){
  y =::
  x =::
  0 res mut =::
  x y <  if{ 1 else 0 } res .. 10 * | res =
  x y <= if{ 1 else 0 } res .. 10 * | res =
  x y >  if{ 1 else 0 } res .. 10 * | res =
  x y >= if{ 1 else 0 } res .. 10 * | res =
  x y == if{ 1 else 0 } res .. 10 * | res =
  x y != if{ 1 else 0 } res .. 10 * | res =
  res ..
}

testStruct struct{ T <>
  T :a
  T :b
}

main public proc( => ){
  1 2u '3' u'ðŸ’»' swap rot3 over dup
  debugPrint
  drop
  debugPrint
  debugPrint
  debugPrint
  debugPrint

  false
  #+cond+# if{
     1
  else false if
     1
  else
     0
  }
  debugPrint

  0x42 test
  dup
    x mut =::
  int y =:
  x debugPrint
  y debugPrint
  x .. debugPrint
  'x' x =
  x .. debugPrint

  true true while{ false rot3 do
    dup debugPrint
  } drop drop
  ' ' debugPrint
  5 while{
    dup debugPrint
    1 - dup 0 >
  do } drop
  y 1 + debugPrint
  2u y - debugPrint

  -1  1u cmpCheck debugPrint
   1  2u cmpCheck debugPrint
   0  1u cmpCheck debugPrint
   1  0u cmpCheck debugPrint
   1 -1u cmpCheck debugPrint
   one ~ debugPrint
   one -_ ~ debugPrint
   one two | three & four xor debugPrint

   bool debugPrint
   byte debugPrint
   codepoint debugPrint
   int debugPrint
   uint debugPrint
   float debugPrint
   type debugPrint
   @one dup () debugPrint debugPrint
   lambda( int ){ dup * } f mut =::
   2 f () debugPrint
   lambda( int ){ dup dup * * } f =
   2 f () debugPrint
   "Test" debugPrint
   "Test" string str =:
   "Test2" str swap debugPrint debugPrint
   { 1 2 3 } for{
     debugPrint
   }

   1 y ( int int ) new debugPrint
   "Constant" "Tuple" 'A' 0x65 ( byte int ) new ( string string ( byte int ) ) new debugPrint
   1 2 int testStruct new debugPrint
   str "struct" string testStruct new debugPrint
}
