test/compiler:

stack #include
core  #import

test proc( int => byte ){ byte cast }

main public proc( => ){
  1 2u '3' u'ðŸ’»' swap rot3 over dup
  debugPrint
  drop
  debugPrint
  debugPrint
  debugPrint
  debugPrint

  false
  #+cond+# if{
     1
  else false if
     1
  else
     0
  }
  debugPrint

  0x42 test
  dup
    x mut =::
  int y =:
  x debugPrint
  y debugPrint
  x .. debugPrint
  'x' x =
  x .. debugPrint

  true true while{ false rot3 do
    dup debugPrint
  } drop drop
  ' ' debugPrint
  5 while{
    dup debugPrint
    1 - dup 0 >
  do } drop
  y 1 + debugPrint
  2u y - debugPrint

  -1  1u cmpCheck
   1  2u cmpCheck
   0  1u cmpCheck
   1  0u cmpCheck
   1 -1u cmpCheck
}

cmpCheck proc( int uint => ){
  y =::
  x =::
  x y <  debugPrint
  x y <= debugPrint
  x y >  debugPrint
  x y >= debugPrint
  x y == debugPrint
  x y != debugPrint
}
